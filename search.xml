<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux系统配置clash-gui界面</title>
      <link href="/2023/11/12/linux%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AEclash-gui%E7%95%8C%E9%9D%A2/"/>
      <url>/2023/11/12/linux%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AEclash-gui%E7%95%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Linux 系统下配置clash gui界面。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最久不久原作者 的github仓库把clash for windows release删除了。目前我们还能使用的客户端有以下：</p><h3 id="基于-clash-meta-内核的"><a href="#基于-clash-meta-内核的" class="headerlink" title="基于 clash.meta 内核的"></a>基于 clash.meta 内核的</h3><ul><li>Clash Verge（全平台 - 归档但不影响）：<a href="https://github.com/zzzgydi/clash-verge">https://github.com/zzzgydi/clash-verge</a></li><li>clashX.meta(macos):<a href="https://github.com/MetaCubeX/ClashX.Meta">https://github.com/MetaCubeX/ClashX.Meta</a></li><li>clash.meta for android（android - 归档但不影响）：<a href="https://github.com/MetaCubeX/ClashMetaForAndroid">https://github.com/MetaCubeX/ClashMetaForAndroid</a></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>v2rayN (人在国外 - windows）：<a href="https://github.com/2dust/v2rayN">https://github.com/2dust/v2rayN</a></li><li>sing-box（全平台）：<a href="https://github.com/SagerNet/sing-box/releases">https://github.com/SagerNet/sing-box/releases</a></li><li>nekoray（windows，linux）：<a href="https://github.com/MatsuriDayo/nekoray">https://github.com/MatsuriDayo/nekoray</a></li><li>shadowrocket，quanx，stash 等等付费或免费 ios 专用软件</li><li><a href="https://github.com/2dust/v2rayNG">v2rayNG</a>/<a href="https://github.com/MatsuriDayo/NekoBoxForAndroid">nekobox</a> 等等 android 专用软件</li></ul><h3 id="clash-for-windows-备份"><a href="#clash-for-windows-备份" class="headerlink" title="clash for windows 备份"></a>clash for windows 备份</h3><p>虽然原作者的clash for windows 客户端已经删库跑路了，不过幸好有备份，这里是备份仓库：<a href="https://github.com/CHH3213/clash-for-windows-backup/releases/tag/v0.20.39">https://github.com/CHH3213/clash-for-windows-backup/releases/tag/v0.20.39</a></p><p>另外，附上原库的archive镜像的：</p><p><a href="https://web.archive.org/web/20231025075452/https://github.com/Fndroid/clash_for_windows_pkg/releases">https://web.archive.org/web/20231025075452/https://github.com/Fndroid/clash_for_windows_pkg/releases</a></p><h2 id="Linux配置clash-for-windows"><a href="#Linux配置clash-for-windows" class="headerlink" title="Linux配置clash for windows"></a>Linux配置clash for windows</h2><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol><li><p>首先，下载Clash.for.Windows-0.20.39-x64-linux.tar.gz，下载完成后终端进入下载目录运行以下命令进行解压：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">tar zxvf Clash.<span class="hljs-keyword">for</span>.Windows<span class="hljs-number">-0.20</span><span class="hljs-number">.39</span>-x64-linux.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>解压完成后，可以将文件夹改名并移到<code>/opt/</code>：目录中（一般我们把安装的软件放在这里）：</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">mv Clash\ <span class="hljs-keyword">for</span>\ Windows<span class="hljs-number">-0.20</span><span class="hljs-number">.39</span>-x64-linux /opt/clash-GUI<br></code></pre></td></tr></table></figure></li><li>进入<code>/opt/clash-GUI</code>目录，可以使用<code>ls</code>查看目录内结构：<br><img data-fancybox="gallery" src="/2023/11/12/linux%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AEclash-gui%E7%95%8C%E9%9D%A2/1699773103616.png" alt="1699773103616" data-caption="1699773103616" loading="lazy"></li><li><code>cfw</code>就是 <code>clash for windows</code>的意思，原作者把gui界面也移植到了linux中，我们可以运行以下命令打开：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./cfw<br></code></pre></td></tr></table></figure>打开之后就是以下界面：<br><img data-fancybox="gallery" src="/2023/11/12/linux%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AEclash-gui%E7%95%8C%E9%9D%A2/1699773265520.png" alt="1699773265520" data-caption="1699773265520" loading="lazy"><br>可以将<code>start with linux</code>打开，这样就可以开机跟随系统启动了。</li><li>代理地址的导入只需要切换到<code>Profiles</code>页面，输入自己购买的订阅地址即可：<br><img data-fancybox="gallery" src="/2023/11/12/linux%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AEclash-gui%E7%95%8C%E9%9D%A2/1699773406701.png" alt="1699773406701" data-caption="1699773406701" loading="lazy"><br>订阅完成后，切换到<code>Proxis</code>页面就可以切换节点：<br><img data-fancybox="gallery" src="/2023/11/12/linux%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AEclash-gui%E7%95%8C%E9%9D%A2/1699773468319.png" alt="1699773468319" data-caption="1699773468319" loading="lazy"></li></ol><h3 id="配置桌面图标"><a href="#配置桌面图标" class="headerlink" title="配置桌面图标"></a>配置桌面图标</h3><p><code>clash for windows</code>linux版本默认是没有桌面图标的，如果退出了就只能重新通过命令行进入，比较麻烦，所以这里我们配置一下桌面图标。</p><ol><li>进入<code>~/.local/share/applications</code>目录：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ~/.local/share/applications<br></code></pre></td></tr></table></figure></li><li>创建<code>clash_gui.desktop</code>：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim clash_gui.desktop<br></code></pre></td></tr></table></figure>输入以下内容<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">[Desktop Entry]<br> Name=clash <span class="hljs-keyword">for</span> linux<br> Icon=/<span class="hljs-keyword">opt</span>/clash-GUI/clash/clash.png<br> Exec=/<span class="hljs-keyword">opt</span>/clash-GUI/clash/cfw<br> Type=Application<br></code></pre></td></tr></table></figure>即如下：<br><img data-fancybox="gallery" src="/2023/11/12/linux%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AEclash-gui%E7%95%8C%E9%9D%A2/1699773939367.png" alt="1699773939367" data-caption="1699773939367" loading="lazy"><br> 需要根据自己的情况修改的只有以下两个字段：<ul><li><code>Icon</code> 是桌面图标所在地址，可以自己网上找一个clash图标下载即可。</li><li><code>Exec</code> 表示<code>cfw</code>命令，这里我的<code>cfw</code>文件是在<code>/opt/clash-GUI/clash/</code>下，所以我的执行命令是如上所是。<br>然后保存退出。</li></ul></li><li>最后增加权限:<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> a+x clash_gui.desktop<br></code></pre></td></tr></table></figure> 然后便可在应用程序中看到clash的桌面图标了，下次我们直接点击桌面图标进入即可，另外右键图标可以选择加入图标。<br> <img data-fancybox="gallery" src="/2023/11/12/linux%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AEclash-gui%E7%95%8C%E9%9D%A2/1699774391577.png" alt="1699774391577" data-caption="1699774391577" loading="lazy"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> clash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LRC转SRT字幕小工具</title>
      <link href="/2023/09/03/LRC%E8%BD%ACSRT%E5%AD%97%E5%B9%95%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
      <url>/2023/09/03/LRC%E8%BD%ACSRT%E5%AD%97%E5%B9%95%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>一个LRC歌词文件转SRT字幕文件的小工具。<br><span id="more"></span></p><h2 id="LRC文件转SRT字幕文件"><a href="#LRC文件转SRT字幕文件" class="headerlink" title="LRC文件转SRT字幕文件"></a>LRC文件转SRT字幕文件</h2><p>最近比较空闲，没事在做MV视频，需要将LRC格式的歌词转为SRT字幕文件，以便于剪辑视频时导入。于是就写了这么一个小工具。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li><p>前往GitHub下载<a href="https://github.com/CHH3213/LRC_convert_SRT/tree/master">源程序</a>，进入目录后，通过运行 <code>gui.py</code> 文件打开</p> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> <span class="hljs-keyword">gui</span>.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p> 运行后会弹出一个窗口</p><p> <img data-fancybox="gallery" src="/2023/09/03/LRC%E8%BD%ACSRT%E5%AD%97%E5%B9%95%E5%B0%8F%E5%B7%A5%E5%85%B7/image.png" alt="Alt text" data-caption="Alt text" loading="lazy"></p><p> 选择要转换的lrc文件，点击 <code>convert</code> 转换即可。</p></li><li><p>我也把它打包成exe文件了，所以可以下载<a href="https://github.com/CHH3213/LRC_convert_SRT/releases/tag/v1.0">.exe文件</a>后运行即可。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stable-diffusion安装全流程+安装问题解决</title>
      <link href="/2023/07/08/stable-diffusion%E5%AE%89%E8%A3%85%E5%85%A8%E6%B5%81%E7%A8%8B-%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2023/07/08/stable-diffusion%E5%AE%89%E8%A3%85%E5%85%A8%E6%B5%81%E7%A8%8B-%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近闲来无事，打算捣鼓一下stable-diffusion，来试试stable-diffusion的AI绘画能力。</p><span id="more"></span><h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><p>使用stable-diffusion一般需要电脑有gpu，如果没有gpu，那么不推荐下载安装了。</p><ul><li>首先，确保电脑里有git环境，否则，请下载安装<a href="https://git-scm.com/downloads">git</a> .</li><li><p>下载python3.10.6，如果怕污染原python环境，可以使用anaconda创建一个虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n stable python=3.10.6 --y<br></code></pre></td></tr></table></figure></li><li><p>使用git拉取stable-diffusion仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/AUTOMATIC1111/stable-diffusion-webui.git<br></code></pre></td></tr></table></figure></li><li><p>以上都准备好后，打开刚下载的stable-diffusion-webui目录中的 <code>webui-user.bat</code>脚本，将python3.10.6的路径写进去（例如，这里我的python路径是”D:\ProgramData\Anaconda3\envs\stable\python.exe”），以及填写COMMANDLINE_ARGS参数：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br><br><span class="hljs-built_in">set</span> PYTHON="D:\ProgramData\Anaconda3\envs\stable\python.exe"<br><span class="hljs-built_in">set</span> GIT=<br><span class="hljs-built_in">set</span> VENV_DIR=<br><span class="hljs-built_in">set</span> COMMANDLINE_ARGS=--xformers --opt-sdp-no-mem-attention --listen --enable-insecure-extension-access<br><br><span class="hljs-keyword">call</span> webui.bat<br></code></pre></td></tr></table></figure></li><li><p>在终端运行 <code>webui-user.bat</code>（可直接双击打开），如果不报错的话会自动下载安装相应的依赖库<br><strong>注意：</strong> 在执行webui-user.bat后，会自动在你的 <code>\stable-diffusion-webui</code>目录中创建一个 <code>venv</code>虚拟环境，所以后面执行的python环境实际上就是这个虚拟环境中的，所以我们可以把 <code>webui-user.bat</code>文件中的python路径更改为venv中的python路径，例如，我的如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> PYTHON=<span class="hljs-string">"E:\CHH3213_KING\NO_Chinese\stable-diffusion-webui\venv\Scripts\python.exe"</span><br></code></pre></td></tr></table></figure></li><li><p>安装成功后，会输出如下信息：</p><p><img data-fancybox="gallery" src="/2023/07/08/stable-diffusion%E5%AE%89%E8%A3%85%E5%85%A8%E6%B5%81%E7%A8%8B-%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/1688818150045.png" alt="1688818150045" data-caption="1688818150045" loading="lazy"></p></li><li><p>在浏览器中输入：<code>127.0.0.1:7860</code>便可以打开stable-diffusion-webui界面</p><p><img data-fancybox="gallery" src="/2023/07/08/stable-diffusion%E5%AE%89%E8%A3%85%E5%85%A8%E6%B5%81%E7%A8%8B-%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/1688820275368.png" alt="1688820275368" data-caption="1688820275368" loading="lazy"></p></li></ul><h2 id="安装过程中可能遇到的问题"><a href="#安装过程中可能遇到的问题" class="headerlink" title="安装过程中可能遇到的问题"></a>安装过程中可能遇到的问题</h2><p>以上步骤是非常理想情况下输出的结果，但是，在执行 <code>webui-user.bat</code>后，大概率会碰到以下几个错误，我们一一来解决。</p><ul><li><p>前言<br>执行 <code>webui-user.bat</code>时，会碰到因为网络问题无法更新相应的依赖库的问题，请打开文件 <code>\stable-diffusion-webui\modules\launch_utils.py</code>，将里面所有的 <code>https://github.com</code>替换成 <code>https://ghproxy.com/https://github.com</code>，改后如下所示：</p><p><img data-fancybox="gallery" src="/2023/07/08/stable-diffusion%E5%AE%89%E8%A3%85%E5%85%A8%E6%B5%81%E7%A8%8B-%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/1688821251209.png" alt="1688821251209" data-caption="1688821251209" loading="lazy"></p></li><li><p>错误1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">setuptools.installer is deprecated. requirements should be satisfied by a pep 517 installer<br></code></pre></td></tr></table></figure><p>执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install --upgrade setuptools<br></code></pre></td></tr></table></figure></li><li><p>错误2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">"RuntimeError: Couldn't install gfpgan."</span> When installing webui<br></code></pre></td></tr></table></figure><p>那么在终端执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install git+https://ghproxy.com/https://github.com/TencentARC/GFPGAN.git@8d2447a2d918f8eba5a4a01463fd48e45126a379 --prefer-binary --default-timeout=100 --use-pep517<br></code></pre></td></tr></table></figure><p>参考：<a href="https://github.com/CompVis/stable-diffusion/issues/506">https://github.com/CompVis/stable-diffusion/issues/506</a></p></li><li><p>错误3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">No module <span class="hljs-string">'xformers'</span>. Proceeding without it.<br></code></pre></td></tr></table></figure><p>遇到这个错误，则在终端运行以下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install --force-reinstall --no-deps --pre xformers<br></code></pre></td></tr></table></figure><p>参考：<a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/discussions/5303">https://github.com/AUTOMATIC1111/stable-diffusion-webui/discussions/5303</a></p></li><li><p>错误4<br>也是最难处理的一个错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ModuleNotFoundError: No module named <span class="hljs-string">'basicsr.version'</span><br></code></pre></td></tr></table></figure><p>在参考<a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/issues/1598">https://github.com/AUTOMATIC1111/stable-diffusion-webui/issues/1598</a> 后依旧解决不了，后来转换思路，直接下载对应的github仓库。首先，进入 <code>stable-diffusion</code>目录：<code>\stable-diffusion-webui\repositories\CodeFormer</code>，在这个目录下，如果已经存在BasicSR文件夹，那么把它删除，再执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/XPixelGroup/BasicSR.git<br></code></pre></td></tr></table></figure><p>在git clone完之后，再进入BasicSR目录，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python setup.py install<br></code></pre></td></tr></table></figure><p>这样就把BasicSR安装完成了。</p></li><li>处理完以上报的错误后，再次执行 <code>webui-user.bat</code>脚本，就可以了。</li></ul><ul><li><p>错误5<br>成功进入 <code>127.0.0.1:7860</code> 后，切换模型会显示 <code>error</code>，这个错误只需要在运行 <code>webui-user.bat</code>脚本前，在 <code>webui-user.bat</code>脚本中增加command 参数，例如，我的完整参数如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> COMMANDLINE_ARGS=--xformers --opt-sdp-no-mem-attention --listen --enable-insecure-extension-access --medvram --autolaunch --deepdanbooru --no-gradio-queue<br><br></code></pre></td></tr></table></figure><p>加载完成后即可。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT openAI注册教程</title>
      <link href="/2023/02/23/ChatGPT-openAI%E6%B3%A8%E5%86%8C%E6%95%99%E7%A8%8B/"/>
      <url>/2023/02/23/ChatGPT-openAI%E6%B3%A8%E5%86%8C%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>ChatGPT是基于深度学习的自然语言处理模型，具体来说，它是一个预训练的神经网络模型，使用了<strong>Transformer架构</strong>和<strong>自回归语言建模技术</strong>。</p><span id="more"></span><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.youtube.com/watch?v=6hiVu8rtzh0&amp;list=PLJDmpB5PyWLrMeV_HixMZXE64KRo2KRXQ&amp;index=2">中国用户怎么注册ChatGPT</a></p><h2 id="1-chatgpt简介"><a href="#1-chatgpt简介" class="headerlink" title="1. chatgpt简介"></a>1. chatgpt简介</h2><p>下面<strong>这段来自chatgpt的回答</strong>：</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/cd7098ce37874d94ac817602a59d33e2.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>ChatGPT是基于深度学习的自然语言处理模型，具体来说，它是一个预训练的神经网络模型，使用了<strong>Transformer架构</strong>和<strong>自回归语言建模技术</strong>。</p><p>训练ChatGPT的过程分为两个主要阶段：</p><ol><li>预训练阶段：使用大规模的文本语料库对模型进行预训练，以学习自然语言的语法、语义和上下文等知识。在这个阶段，模型会通过自回归语言建模技术来预测下一个词语或子词，同时使用自注意力机制和残差连接来处理长序列和提高模型的效率。预训练过程可以分为两种方式：无监督学习和有监督学习。</li><li>微调阶段：将预训练好的模型进行微调，以适应特定的任务和应用场景。在这个阶段，模型会被输入一些带标签的数据，进行调整和优化，以在特定任务上取得更好的效果。</li></ol><p>ChatGPT的优点是可以在多个自然语言处理任务上进行迁移学习，因为它已经学习了语言的通用表示。例如，它可以用于生成对话、文本分类、问答系统等多个任务。同时，它也可以通过不断的微调和优化来提高模型的效果和性能。</p><h2 id="2-注册步骤"><a href="#2-注册步骤" class="headerlink" title="2. 注册步骤"></a>2. 注册步骤</h2><p>ChatGPT是一个由OpenAI开发的人工智能模型，由于OpenAI的API服务目前并不支持国内的用户，因此在国内使用ChatGPT需要多一些步骤。</p><ul><li><p>准备一个海外ip</p><p>换句话说，就是需要使用梯子，使用梯子后就可以使用<a href="https://www.ipaddress.my/?lang=zh_CN">该网址</a>查询到自己的IP地址属地，例如我用梯子后显示IP属地是美国。<br><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/7dd05a5fca594eb2a6d5465dc0a12614.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p></li><li><p>打开chatgpt注册网址：<a href="https://chat.openai.com/auth/login">https://chat.openai.com/auth/login</a>，正常打开后显示以下界面，左边是登录(log in)，右边是注册(sign up)。</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/47d1b3b79a3e41158811fcca188dbc7a.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>如果你有谷歌账号的话可以直接选择登录，使用谷歌邮箱登录，否则的话就按照正常步骤使用邮箱（国内国外邮箱都行）注册一个账号就行。<br><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/d1fa379531694ff7bbceb35a8dc5e43d.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"><br>注册完成后选择登录，第一次需要填写你的姓和名(last name, first name)，填写完后就会到最关键的一步，使用手机号验证账号。</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/294dc3b262004f0488852707d7e16628.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"><br><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/bda848c987eb4b23a0d7488977ec8eb0.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p></li><li><p>使用海外手机号接收短信</p><p>由于国内手机号不支持，所以需要使用海外的手机号接收验证码，这里我选择的是美国的手机号（注意，选择的手机号最好与你的ip所在地保持一致，这样接收到验证码的概率比较大）。</p><p>进入网址：<a href="https://sms-activate.org/cn">https://sms-activate.org/cn</a>，注册登录，点击左边的openai服务。</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/e52d893922004f1eaed7160c9995e61a.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy">点击后会显示如下界面，其中的价格单位是卢布（1美元~=75卢布），选择一个跟你ip一致的国家，例如我选择的是美国，点击旁边的购物车，会显示你账户没有充足基金，所以我们花几块钱充值一下即可。<br><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/92b57d2c93de4e86b1338405617e51c6.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>点击右上角的余额—&gt;充值<br><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/04093759f99e4e329200a90c1bd01a26.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>选择支付宝，充值1美元即可。<br><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/2932d5aa445f43ddb9383d2d7caeb095.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"><br>充值完成后，重新点击购物车，就会给我们分配一个号码</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/14b528ce44274102b18f357e363486e4.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy">我们将号码填入chatgpt的手机号输入界面，发送验证码即可。<br><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/7588071970734eeeb6a16ecb8880189d.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"><br>顺利的话我们就可以在刚才的接码平台上接收到验证码，填入后就顺利完成了注册。但有可能接码平台一直收不到验证码，这是我们可以多刷新几次，并且在20分钟内取消，重新申请一个号码是不计费的。<br><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/6b69b648093d447cb3e1c84891e3a265.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p></li><li><p>注册成功后就可以愉快地跟chatgpt聊天了。</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/2e11f7e29d2547558f07fdd1ef546223.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"><br>对文字步骤不清楚的，可以观看<a href="https://www.youtube.com/watch?v=6hiVu8rtzh0&amp;list=PLJDmpB5PyWLrMeV_HixMZXE64KRo2KRXQ&amp;index=2">YouTube视频</a>，最后，祝使用愉快！</p></li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>国内其实也有一些chatgpt的接口，但并没有这个这么智能，感兴趣的进入下面这些网址看看。</p><ul><li><a href="https://you.com/">https://you.com/</a></li><li><a href="https://www.bilibili.com/video/BV1jx4y1L7PQ/?spm_id_from=333.788.top_right_bar_window_custom_collection.content.click&amp;vd_source=0e34402ece26fd6fce2fb7540b54bbf3">bilibili视频</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chatgpt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 修改鼠标光标主题并全局生效的方法</title>
      <link href="/2022/12/03/Ubuntu-%E4%BF%AE%E6%94%B9%E9%BC%A0%E6%A0%87%E5%85%89%E6%A0%87%E4%B8%BB%E9%A2%98%E5%B9%B6%E5%85%A8%E5%B1%80%E7%94%9F%E6%95%88%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2022/12/03/Ubuntu-%E4%BF%AE%E6%94%B9%E9%BC%A0%E6%A0%87%E5%85%89%E6%A0%87%E4%B8%BB%E9%A2%98%E5%B9%B6%E5%85%A8%E5%B1%80%E7%94%9F%E6%95%88%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>一般情况下，ubuntu默认的鼠标光标主题都比较不好看，所以我们可以通过以下方法进行修改。<br><span id="more"></span></p><h2 id="获取鼠标光标主题"><a href="#获取鼠标光标主题" class="headerlink" title="获取鼠标光标主题"></a>获取鼠标光标主题</h2><p>在<a href="https://www.gnome-look.org/browse?cat=107&amp;ord=latest">网站</a>选择你想要的鼠标主题，例如我选择的是<a href="https://www.gnome-look.org/s/Gnome/p/1360254/">这一款</a>。</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/a25d23933da9417b9f806fa6e34efa94.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"><br><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/0e6a926ecfdf4c56bfb9a6061fb75fde.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"><br>点击下载后，将压缩包解压，并进入该文件夹内，将文件夹移至<code>/usr/share/icons</code>目录内</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mv</span> oreo_spark_pink_cursors /usr/share/icons<br></code></pre></td></tr></table></figure><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>打开ubuntu系统左下角的查找应用程序，输入<code>tweak</code>，打开出现的应用（中文系统下是<code>优化</code>，英文系统是<code>tweak</code>）。<br><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/db6d8fec0fde4743b8947582997b0fde.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"><br>在<code>优化</code>中选择<code>外观</code>，找到<code>光标</code>，选择你想安装的鼠标主题即可。</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/35e08399c6944c248e978c8aa04fb7d0.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><h2 id="将下载的鼠标光标主题加入到-alternative-x-cursor-theme"><a href="#将下载的鼠标光标主题加入到-alternative-x-cursor-theme" class="headerlink" title="将下载的鼠标光标主题加入到 alternative x-cursor-theme"></a>将下载的鼠标光标主题加入到 alternative x-cursor-theme</h2><p>在进行步骤2后，虽然鼠标主题生效了，但是并没有全局生效，在一些应用内依旧是原来的主题。所以，还需要进行以下步骤的配置。</p><p>打开终端，在终端输入以下命令，将鼠标光标主题加入到 <code>alternative x-cursor-theme</code> 中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo update-alternatives --install /usr/share/icons/default/index.theme x-cursor-theme /usr/share/icons/你的鼠标光标主题名称/cursor.theme 20<br></code></pre></td></tr></table></figure><p>例如，我的是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo update-alternatives --install /usr/share/icons/default/index.theme x-cursor-theme /usr/share/icons/oreo_spark_pink_cursors/cursor.theme 20<br></code></pre></td></tr></table></figure><p>接着，在终端输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo update-alternatives --config x-cursor-theme<br></code></pre></td></tr></table></figure><p>选择你的候选项编号</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/2997c8b3c1ef4055a67023218c6ad4b5.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>选择完成后，重启系统生效。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://vincentbel.com/ubuntu-change-cursor-theme/">https://vincentbel.com/ubuntu-change-cursor-theme/</a></li><li><a href="https://www.youtube.com/watch?v=U_aQv74bHRQ">https://www.youtube.com/watch?v=U_aQv74bHRQ</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 页面美化 </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github主页美化</title>
      <link href="/2022/10/27/Github%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/"/>
      <url>/2022/10/27/Github%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Github主页的展示效果总结。<br><span id="more"></span></p><h2 id="添加Github状态"><a href="#添加Github状态" class="headerlink" title="添加Github状态"></a>添加Github状态</h2><p>实现效果如下：</p><p><img data-fancybox="gallery" src="https://s2.loli.net/2022/06/12/dyDPRcEV9HLa318.png" alt="image-20220612125324038" data-caption="image-20220612125324038" loading="lazy"></p><p>配置地址见：<a href="https://github.com/anuraghazra/github-readme-stats">https://github.com/anuraghazra/github-readme-stats</a></p><h2 id="添加Github小图标"><a href="#添加Github小图标" class="headerlink" title="添加Github小图标"></a>添加Github小图标</h2><p>如何添加下图所示的小图标呢？</p><p><img data-fancybox="gallery" src="https://s2.loli.net/2022/06/12/SmVoYOB9xyNC6LW.png" alt="image-20220612135513281" data-caption="image-20220612135513281" loading="lazy"></p><p>方法很简单：</p><ol><li>找到这个网站主页：<a href="https://shields.io/，这其实就是一个设计图标的网站。">https://shields.io/，这其实就是一个设计图标的网站。</a></li><li>打开官网主页后，找到下述图中信息，直接填充好文字和信息，以及图标的颜色，点击<code>Make Badge</code>，就会生成这个图标的地址。</li></ol><p>​    <img data-fancybox="gallery" src="https://s2.loli.net/2022/06/12/uNKfQRyhGJsjXen.png" alt="image-20220612135849183" data-caption="image-20220612135849183" loading="lazy"></p><ol><li>然后在Github主页插入即可。插入方式如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[![](https://img.shields.io/badge/CHH3213-CSDN-red)](https://blog.csdn.net/weixin_42301220?spm=1010.2135.3001.5343)<br></code></pre></td></tr></table></figure><p>前面的是图标地址，后面的是链接地址。    生成后的图标如下：</p><p><a href="https://blog.csdn.net/weixin_42301220?spm=1010.2135.3001.5343"><img src="https://img.shields.io/badge/CHH3213-CSDN-red" alt></a></p><h2 id="使用Wakatime记录你的Coding数据"><a href="#使用Wakatime记录你的Coding数据" class="headerlink" title="使用Wakatime记录你的Coding数据"></a>使用Wakatime记录你的Coding数据</h2><p><a href="https://wakatime.com/">WakaTime</a> 是一款可以记录你的编码时间的工具，目前支持绝大部分主流的 IDE 以及 Chrome 浏览器。</p><h3 id="安装Wakatime"><a href="#安装Wakatime" class="headerlink" title="安装Wakatime"></a>安装Wakatime</h3><ol><li><a href="https://wakatime.com/signup">注册</a> WakaTime 账号；</li><li>在<a href="https://wakatime.com/plugins">官网</a>找到对应的 IDE 插件，按照步骤安装 WakaTime 插件；</li><li>在<a href="https://wakatime.com/settings/account">个人设置</a>页面复制 Secret API Key ，填入对应的 WakaTime 插件中；</li><li>过一段时间后，你就可以在 WakaTime 网站上看到你的编码情况；</li></ol><h3 id="主页接入waka-box"><a href="#主页接入waka-box" class="headerlink" title="主页接入waka-box"></a>主页接入waka-box</h3><p><a href="https://github.com/matchai/waka-box">waka-box</a>提供了你每周的代码状态，并且更新为类似于下面的内容：</p><p><img data-fancybox="gallery" src="https://s2.loli.net/2022/06/12/B7QEtZ4UCOJuoh2.png" alt="image-20220612125625163" data-caption="image-20220612125625163" loading="lazy"></p><p>下面是接入步骤：</p><ol><li><p>获取 GitHub API 令牌， 打开 <code>Settings / Developer settings / Personal access tokens</code> 页面，创建 <a href="https://github.com/settings/tokens/new"><code>Github Token</code></a> ，权限部分勾选<code>repo</code>、<code>workflow</code>和<code>user</code>。生成后将<code>token</code>保存下来</p><p> <img src="/2022/10/27/Github%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/20221026211944.png" alt>  </p></li><li><p>进入 <code>WakaTime</code> <a href="https://wakatime.com/settings/profile">配置页面</a>，勾选 <code>Display coding activity publicly</code> 与 <code>Display languages, editors, operating systems publicly</code></p></li><li>查看 <code>WakaTime</code> 账号 <a href="https://wakatime.com/settings/api-key">api-key</a>，并保存好</li></ol><p>项目设置</p><ol><li><p>在你的Github 自定义首页的仓库，打开 <code>Settings / Secrets / Actions</code> 页面，点击 <code>New repository secret</code></p><p> <img src="/2022/10/27/Github%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/20221026211519.png" alt>  </p></li><li><p>添加 <code>Secret API Key</code> 密钥，Name 为 <code>WAKATIME_API_KEY</code> ，value 为<code>Secret API Key</code> 密钥</p></li><li>添加 <code>Secret API Key</code> 密钥，Name 为 <code>GH_TOKEN</code> ，value 为<code>GitHub API</code> token</li><li><p>配置Github Action工作流</p><p> 打开该仓库的 <code>Actions</code> 页面，点击 <code>set up a workflow yourself</code> 设置工作流</p><p> <img src="/2022/10/27/Github%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/actions.png" alt>  </p><p> 文件名随意，清空初始内容，添入如下配置</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Waka</span> <span class="hljs-string">Readme</span><br><br><span class="hljs-attr">on:</span><br><span class="hljs-attr">schedule:</span><br>    <span class="hljs-comment"># Runs at 12am IST</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">cron:</span> <span class="hljs-string">&#x27;30 18 ** *&#x27;</span><br><span class="hljs-attr">workflow_dispatch:</span><br><span class="hljs-attr">jobs:</span><br><span class="hljs-attr">update-readme:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Update</span> <span class="hljs-string">Readme</span> <span class="hljs-string">with</span> <span class="hljs-string">Metrics</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">anmol098/waka-readme-stats@master</span><br>        <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">WAKATIME_API_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.WAKATIME_API_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">GH_TOKEN:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GH_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">SHOW_OS:</span> <span class="hljs-string">&quot;False&quot;</span><br>        <span class="hljs-attr">SHOW_PROJECTS:</span> <span class="hljs-string">&quot;False&quot;</span><br>        <span class="hljs-attr">SHOW_COMMIT:</span> <span class="hljs-string">&quot;False&quot;</span><br>        <span class="hljs-attr">SHOW_DAYS_OF_WEEK:</span> <span class="hljs-string">&quot;False&quot;</span><br>        <span class="hljs-attr">SHOW_TIMEZONE:</span> <span class="hljs-string">&quot;False&quot;</span><br>        <span class="hljs-attr">SHOW_EDITORS:</span> <span class="hljs-string">&quot;False&quot;</span><br>        <span class="hljs-attr">SHOW_SHORT_INFO:</span> <span class="hljs-string">&quot;False&quot;</span><br>        <span class="hljs-attr">SHOW_LOC_CHART:</span> <span class="hljs-string">&quot;False&quot;</span><br>        <span class="hljs-attr">SHOW_TOTAL_CODE_TIME:</span> <span class="hljs-string">&quot;False&quot;</span><br>        <span class="hljs-attr">SHOW_PROFILE_VIEWS:</span> <span class="hljs-string">&quot;False&quot;</span><br></code></pre></td></tr></table></figure><p> 一些自定义配置可以在 <a href="https://github.com/anmol098/waka-readme-stats">waka-readme-stats</a> 仓库中找到示例。</p><p> <img src="/2022/10/27/Github%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/set.png" alt>  </p><p> 然后提交至仓库。</p></li></ol><ol><li><p>更新<code>README.md</code>文件，在需要展示的地方，添加如下代码，下面代码相当于占位符，生成后的数据统计会放置在这个位置之中。</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&lt;!--START_SECTION:waka--&gt;</span><br><span class="hljs-string">&lt;!--END_SECTION:waka--&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>点击该工作流，再点击<code>Run workflow</code>运行。</p><p> <img src="/2022/10/27/Github%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/20221026205208.png" alt>  </p><blockquote><p>github actions 工作流是根据 .yml 配置文件定时运行任务，如果想马上看到结果，就需要手动执行一下</p></blockquote></li><li><p>运行成功后可以点击当前的workflow进入查看执行日志。</p><p> <img src="/2022/10/27/Github%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/20221026212952.png" alt>  </p></li><li>以上配置完成后耐心等待数据同步到<code>readme</code>即可。</li></ol><p>另外还可参考以下资料：</p><ul><li><a href="https://blog.csdn.net/weixin_43233914/article/details/126087735">https://blog.csdn.net/weixin_43233914/article/details/126087735</a></li><li><a href="https://github.com/athul/waka-readme#extras">https://github.com/athul/waka-readme#extras</a></li><li><a href="https://github.com/anmol098/waka-readme-stats">https://github.com/anmol098/waka-readme-stats</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 页面美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows远程桌面工具连接Ubuntu系统</title>
      <link href="/2022/10/18/Windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E5%B7%A5%E5%85%B7%E8%BF%9E%E6%8E%A5Ubuntu%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/10/18/Windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E5%B7%A5%E5%85%B7%E8%BF%9E%E6%8E%A5Ubuntu%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><h2 id="1-1-常见远程桌面软件推荐"><a href="#1-1-常见远程桌面软件推荐" class="headerlink" title="1.1 常见远程桌面软件推荐"></a>1.1 常见远程桌面软件推荐</h2><p>随着过去一年多的研究生生涯，也陆陆续续用了几款远程桌面软件。目前来看都还不错。我主要用过的是4款：<a href="https://www.teamviewer.cn/cn/">TeamViewer</a>，<a href="https://rustdesk.com/zh/">RustDesk</a>, <a href="https://sunlogin.oray.com/download">向日葵</a>, <a href="http://www.hellodesk.cn/download.html">ToDesk</a>。这4款ubuntu和windows下均可使用。</p><p>4个软件的界面分别如下：</p><p><img src="https://img-blog.csdnimg.cn/340cf47adb58419b9bc6a790a8540f34.png#pic_center" alt><br><img src="https://img-blog.csdnimg.cn/aa8f3c29acf14bcb87db5bc50803f45a.png#pic_center" alt><br><img src="https://img-blog.csdnimg.cn/df6a1ea3673442a2a7ae941521856fca.png#pic_center" alt><br><img src="https://img-blog.csdnimg.cn/334aee6b208c485bbf5eb6c03285445b.png#pic_center" alt>  </p><h2 id="1-2-比较"><a href="#1-2-比较" class="headerlink" title="1.2 比较"></a>1.2 比较</h2><ul><li>其中，个人体验而言，TeamViewer，RustDesk,ToDesk是优于向日葵的。因为向日葵免费版不能够<strong>进行传输文件</strong>，<strong>剪贴板</strong>也不能共享（不能相互之间复制粘贴文字）。</li><li>速度而言，使用局域网时，体验上三者没有什么差别；不使用局域网连接时，向日葵速度&gt;TeamViewer&gt;RustDesk=ToDesk。所以，使用局域网时，还是推荐使用后三者的。不过可以自建服务器，不过我自己没有试过，还不懂咋搞。。。</li><li>使用向日葵可能会碰到的一个问题，就是远程连接Ubuntu时，一连接就秒断的问题。具体可参考<a href="https://www.jianshu.com/p/0274a4b5e303">这个</a>。之前实验室的服务器就碰到了这个问题，折腾了很久都没解决，还差点把系统搞崩了，因此果断放弃在服务器上使用向日葵，转为使用后3种了。</li></ul><h1 id="2-使用windows远程桌面连接ubuntu"><a href="#2-使用windows远程桌面连接ubuntu" class="headerlink" title="2. 使用windows远程桌面连接ubuntu"></a>2. 使用windows远程桌面连接ubuntu</h1><p>用过windows远程桌面连接的小伙伴们都知道，使用起来非常顺畅丝滑，界面清晰。但它只能在windows之间使用，远程连接ubutnu还需要进行一些配置。</p><h2 id="2-1-安装xrdp"><a href="#2-1-安装xrdp" class="headerlink" title="2.1 安装xrdp"></a>2.1 安装xrdp</h2><p>Xrdp 是一个微软远程桌面协议（RDP）的开源实现，它允许我们通过图形界面控制远程系统。这里使用RDP而不是VNC作为远程桌面，是因为Windows自带的远程桌面连接软件用的就是RDP协议，RDP在Windows下的体验非常好，包括速度很快（因为压缩方案做得比较好），可以直接在主机和远程桌面之间复制粘贴等等。</p><blockquote><p>有的Xwindow软件是不太兼容xrdp的（比如ubuntu 18.04的默认桌面），但是ubuntu 20.04使用的Gnome是完全ok的。</p></blockquote><p>安装过程如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install xrdp<br></code></pre></td></tr></table></figure><p>安装完成xrdp 服务将会自动启动，可以输入下面的命令验证它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl status xrdp<br></code></pre></td></tr></table></figure><p>可以将xrdp设为开机启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> xrdp<br></code></pre></td></tr></table></figure></p><p>默认情况下，xrdp 使用<code>/etc/ssl/private/ssl-cert-snakeoil.key</code>，它仅仅对ssl-cert用户组成语可读，所以需要运行下面的命令，将xrdp用户添加到这个用户组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo adduser xrdp ssl-cert  <br>sudo systemctl restart xrdp<br></code></pre></td></tr></table></figure><p>然后使用Windows自带的远程桌面软件连接服务器IP地址或者域名就行了。</p><h2 id="2-2-问题1：远程连接后出现黑屏"><a href="#2-2-问题1：远程连接后出现黑屏" class="headerlink" title="2.2 问题1：远程连接后出现黑屏"></a>2.2 问题1：远程连接后出现黑屏</h2><p>==连接远程桌面输入账户和密码后，进入ubuntu20.04后，如果出现的是黑屏==，<font color="red>ubuntu系统下登出用户（log" out），远程连接正常。< font></font></p><p>或者使用下面步骤解决根本问题。</p><p>详情可阅读<a href="https://askubuntu.com/questions/1245020/xrdp-on-ubuntu-20-04">参考资料2.</a></p><ul><li><p>打开<code>startwm.sh</code>文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/xrdp/startwm.sh<br></code></pre></td></tr></table></figure></li><li><p>在以下位置添加如下内容：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">unset</span> DBUS_SESSION_BUS_ADDRESS<br><span class="hljs-built_in">unset</span> XDG_RUNTIME_DIR<br></code></pre></td></tr></table></figure><p>  <img src="https://img-blog.csdnimg.cn/88093ffce5284e3294f86a5b867ec5be.png#pic_center" alt>  </p></li></ul><!-- <center><img src="https://img-blog.csdnimg.cn/88093ffce5284e3294f86a5b867ec5be.png" width=60%></center> --><ul><li><p>然后重启xrdp服务，重新尝试连接即可。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart xrdp<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>除此之外，若远程登录后不登出直接关闭远程窗口，ubuntu系统登录后无法看到桌面，需要远程后登出才可以使用。</p></blockquote><h2 id="2-3-问题2：远程连接只能登陆root用户，无法登录普通用户"><a href="#2-3-问题2：远程连接只能登陆root用户，无法登录普通用户" class="headerlink" title="2.3 问题2：远程连接只能登陆root用户，无法登录普通用户"></a>2.3 问题2：远程连接只能登陆root用户，无法登录普通用户</h2><ul><li><p>进行 <code>~/.xsession</code>的配置，以下以ubuntu20.04 gnome桌面类型配置为例。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> gnome-session &gt; ~/.xsession<br></code></pre></td></tr></table></figure></li><li><p>修改<code>startwm.sh</code></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/xrdp/startwm.sh<br></code></pre></td></tr></table></figure><p>  在<code>test -x /etc/X11/Xsession &amp;&amp; exec /etc/X11/Xsession</code>前添加如下代码：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gnome-session<br>. /etc/X11/Xsession<br></code></pre></td></tr></table></figure><p>  <img src="https://img-blog.csdnimg.cn/7a711d14430c46a7b2bfcd585a5ce391.png#pic_center" alt>  </p></li></ul><ul><li><p>重启xrdp服务</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart xrdp<br></code></pre></td></tr></table></figure></li><li><p>使用windows远程连接工具连接Ubuntu，输入相应的用户密码后即可进入</p></li></ul><h1 id="3-进行内网穿透"><a href="#3-进行内网穿透" class="headerlink" title="3. 进行内网穿透"></a>3. 进行内网穿透</h1><blockquote><p>进行内网穿透的手段还可以参考<a href="https://chh3213.github.io/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/">博客</a>。这里不再赘述</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/336429888">https://zhuanlan.zhihu.com/p/336429888</a></li><li><a href="https://askubuntu.com/questions/1245020/xrdp-on-ubuntu-20-04">https://askubuntu.com/questions/1245020/xrdp-on-ubuntu-20-04</a></li><li><a href="https://blog.csdn.net/Fatmear/article/details/122037566">https://blog.csdn.net/Fatmear/article/details/122037566</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Remote </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透工具——cpolar</title>
      <link href="/2022/10/15/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94cpolar/"/>
      <url>/2022/10/15/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94cpolar/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在之前介绍了<a href="https://chh3213.github.io/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/">SakuraFrp</a>内网穿透工具，后来又发现了一个也比较好的内网穿透工具<a href="https://www.cpolar.com/">cpolar</a>。</p><span id="more"></span><p>打开官网后直接选择对应版本下载安装即可。</p><p><img src="/2022/10/15/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94cpolar/下载.png#pic_center" alt>  </p><p>下面介绍windows下和ubuntu的安装。</p><h2 id="☺️windows-被控端安装"><a href="#☺️windows-被控端安装" class="headerlink" title="☺️windows 被控端安装"></a>☺️windows 被控端安装</h2><p>在官网注册好账号后，到官方界面下载对应的安装包，解压后默认安装即可。cpolar安装后会默认安装两条样例隧道:</p><ul><li>一个是Website隧道，指向http 8080端口</li><li>一个是远程桌面隧道（win系统），指向tcp 3389端口</li></ul><p>因此，我们安装完成后，只需要启动远程桌面隧道服务，就可以获得公网地址。</p><p>浏览器访问<code>127.0.0.1:9200</code>，登录cpolar web-ui管理界面。点击左侧仪表盘——隧道管理——隧道列表，找到远程桌面隧道，点击启动该隧道</p><p><img src="/2022/10/15/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94cpolar/隧道列表.png#pic_center" alt>  </p><p>隧道启动成功后，点击左侧仪表盘——状态——在线隧道列表，找到远程桌面隧道，可以看到已经有生成了相应的公网地址，复制下来。</p><p>安装完成后，在另外一台windows电脑进行远程桌面连接，填入刚才生成的公网TCP端口地址（是<code>tcp://</code>后面的地址），就可以实现内网穿透远程桌面连接。</p><h2 id="☺️linux被控端安装"><a href="#☺️linux被控端安装" class="headerlink" title="☺️linux被控端安装"></a>☺️linux被控端安装</h2><p>当服务器为linux系统时，我们可以通过SSH远程连接，同样正常在服务器安装cpolar客户端，然后映射内网端口即可。</p><p>linux系统官网已经给了一键自动安装脚本</p><ul><li>国内使用  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash<br></code></pre></td></tr></table></figure></li><li><p>国外使用</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sL https://git.io/cpolar | sudo bash<br></code></pre></td></tr></table></figure></li></ul><p>注意root权限问题。</p><p>安装完成后，登录账号查看认证的token：</p><p><img src="/2022/10/15/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94cpolar/token.png#pic_center" alt></p><p>然后终端输入：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">cpolar authtoken 输入<span class="hljs-built_in">token</span>数字xxxxxxxxxxxxxxxxxx<br></code></pre></td></tr></table></figure></p><ul><li>如果需要配置cpolar开机自启动:  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> cpolar<br></code></pre></td></tr></table></figure></li><li>启动服务时输入命令：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start cpolar<br></code></pre></td></tr></table></figure></li><li>通过查看服务状态来检查是否启动成功：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl status cpolar<br></code></pre></td></tr></table></figure>  如显示<code>active</code>，则说明已经启动成功。</li><li><p>关闭命令：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl stop cpolar<br></code></pre></td></tr></table></figure></li><li><p>cpolar 卸载方法</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash -s -- --remove<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">cpolar默认安装路径 /usr/local/bin/cpolar,<br>安装脚本会自动配置systemd服务脚本，启动以后，可以开机自启动。<br>如果第一次安装，会默认配置一个简单的样例配置文件，创建了两个样例隧道，一个web，一个ssh<br>cpolar配置文件路径: /usr/local/etc/cpolar/cpolar.yml<br></code></pre></td></tr></table></figure><p>启动成功后，登录cpolar官网后台查看<a href="https://dashboard.cpolar.com/status">状态</a>，可以查看到所有在线隧道的公网地址，找到SSH隧道的公网地址，复制下来。</p><p><img src="/2022/10/15/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94cpolar/ssh状态.png#pic_center" alt>  </p><p>然后就可以使用ssh相关工具通过公网ip登录了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh username@公网地址 -p 端口号<br></code></pre></td></tr></table></figure><br>如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh pi@1.tcp.vip.cpolar.cn -p 20013<br></code></pre></td></tr></table></figure><br>由于我们的本地22端口到了公网被映射到了20013端口，所以，ssh命令需要加-p参数，后面加公网隧道端口号。</p>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透工具——SakuraFrp</title>
      <link href="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://www.natfrp.com/user/">SakuraFrp</a>是一个内网穿透工具，使用它就可以轻松的实现在不是同一个局域网下的远程连接☺️。<br><span id="more"></span></p><h2 id="😋SakuraFrp简单介绍"><a href="#😋SakuraFrp简单介绍" class="headerlink" title="😋SakuraFrp简单介绍"></a>😋SakuraFrp简单介绍</h2><p>内网穿透的基本原理可以戳<a href="https://doc.natfrp.com/#/basics">此处</a>。</p><h2 id="😋被控端电脑接入步骤"><a href="#😋被控端电脑接入步骤" class="headerlink" title="😋被控端电脑接入步骤"></a>😋被控端电脑接入步骤</h2><h3 id="😉Sakura-frp账号注册"><a href="#😉Sakura-frp账号注册" class="headerlink" title="😉Sakura frp账号注册"></a>😉Sakura frp账号注册</h3><p>首先在<a href="https://www.natfrp.com/user/">官网</a>注册Sakura frp账号。注册完成后需要进行实名认证:</p><!-- <center><img src="./SakuraFrp内网穿透工具/实名认证.png" width=60%></center> --><p><img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/实名认证.png#pic_center" alt></p><p>点击首页的这个地方可以查看访问密钥，这个密钥待会用得上，不能把访问密钥告诉给他人。</p><!-- <center><img src='SakuraFrp内网穿透工具/访问密钥.png' width=60%/></center> --><p><img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/访问密钥.png#pic_center" alt></p><h3 id="😉windows被控端设置"><a href="#😉windows被控端设置" class="headerlink" title="😉windows被控端设置"></a>😉windows被控端设置</h3><p>点击<code>穿透</code>下的<code>软件下载</code>按钮</p><!-- <center><img src='SakuraFrp内网穿透工具/doownloads.png' width=60%/></center> --><p><img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/doownloads.png#pic_center" alt></p><p>进入页面后，官方推荐的是直接下载启动器，因此我们直接下载启动器即可。</p><!-- <center><img src='SakuraFrp内网穿透工具/启动器.png' width=60%/></center> --><p><img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/启动器.png#pic_center" alt></p><p>下载完成后，点击安装即可。安装完后打开，软件大概长这样。</p><!-- <center><img src='SakuraFrp内网穿透工具/软件.png' width=60%/></center> --><p><img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/软件.png#pic_center" alt></p><p>将刚才网页上的访问密钥填入，登录即可。</p><p>登陆完成后，点左边菜单栏的隧道，点击<code>+</code>号，进行相应的填写。例如这样</p><!-- <center><img src='SakuraFrp内网穿透工具/隧道.png' width=60%/></center> --><p><img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/隧道.png#pic_center" alt></p><p>需要注意的是<code>隧道类型</code>和<code>穿透节点</code>的选择。<code>隧道类型</code>选择<code>TCP</code>（想使用<code>ssh</code>方式，也是选择<code>TCP</code>），<code>穿透结点</code>选择一个可以用的就行，本地IP填写<code>127.0.0.1</code>即可。填写完成后点击创建，隧道就创建成功了。</p><!-- <center><img src='SakuraFrp内网穿透工具/隧道开启.png' width=60%/></center> --><p><img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/隧道开启.png#pic_center" alt></p><blockquote><p>隧道的创建也可以直接在网页上创建，然后在启动器中刷新即可。</p></blockquote><p>最后，点击开启刚才的隧道，会弹出日志信息，记住这个日志信息上面的IP或者服务器域名，待会通过这个IP连接被控电脑：</p><!-- <center><img src='SakuraFrp内网穿透工具/20221015135818.png' width=60%/></center> --><p><img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/20221015135818.png#pic_center" alt></p><p>至此，内网穿透全部搞定，被控电脑全部设置完毕。</p><h3 id="😉远程连接被控端"><a href="#😉远程连接被控端" class="headerlink" title="😉远程连接被控端"></a>😉远程连接被控端</h3><p>上面创建内网穿透的过程其实就是分配了一个公网IP，所以接下来我们可以通过这个公网IP来访问我们的电脑；</p><p>win10提供了相当给力的远程连接工具：“远程桌面连接”。可以在windows系统之间进行远程控制。</p><p>如果没有启动远程桌面连接，那么按照下述步骤设置。</p><ol><li><p>打开<code>我的电脑</code>，右键点击<code>属性</code></p> <!-- <center><img src='SakuraFrp内网穿透工具/属性.png' width=60%/></center> --><p> <img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/属性.png#pic_center" alt></p></li><li><p>选择<code>远程设置</code></p> <!-- <center><img src='SakuraFrp内网穿透工具/远程设置.png' width=60%/></center> --><p> <img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/远程设置.png#pic_center" alt></p></li><li><p>点击<code>允许远程协助连接此计算机</code>即可开启。</p> <!-- <center><img src='SakuraFrp内网穿透工具/20221015140700.png' width=60%/></center> --><p> <img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/20221015140700.png#pic_center" alt></p></li><li><p>开启之后，打开<code>远程桌面连接</code>程序，直接电脑的左下角菜单栏搜索即可出来。填入内网穿透的地址、远程计算机账户名、密码(无密码留空)即可远程。</p> <!-- <center><img src='SakuraFrp内网穿透工具/远程桌面.png' width=60%/></center> --><p> <img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/远程桌面.png#pic_center" alt></p></li></ol><h3 id="😉ubuntu被控端设置"><a href="#😉ubuntu被控端设置" class="headerlink" title="😉ubuntu被控端设置"></a>😉ubuntu被控端设置</h3><p>ubuntu被控端需要下载<code>frpc</code>客户端，点击<code>穿透</code>下的<code>软件下载</code>按钮，进入后选择<code>linux系统</code></p><!-- <center><img src='SakuraFrp内网穿透工具/20221015141250.png' width=60%/></center> --><p><img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/20221015141250.png#pic_center" alt></p><p>至于选择哪一个架构，可以在ubutnu系统中在终端使用命令查看：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">dpkg <span class="hljs-comment">--print-architecture</span><br></code></pre></td></tr></table></figure><p>或者使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -m<br></code></pre></td></tr></table></figure></p><!-- <center><img src='SakuraFrp内网穿透工具/20221015141845.png' width=50%/></center> --><p><img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/20221015141845.png#pic_center" alt></p><p>详情可参考<a href="https://blog.csdn.net/weixin_41010198/article/details/109166131">博客</a>查看Linux系统架构的命令。我的是<code>amd64</code>，因此选择<code>amd64</code>点击右边的<code>复制链接</code>。</p><p>在终端使用下面的命令进入 <code>/usr/local/bin</code> 目录并下载文件,确保现在已经处于有 <code>root</code> 权限的环境下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/bin<br><br><span class="hljs-comment"># 一般来说只需要使用这条命令:</span><br>wget -O frpc &lt;下载地址&gt;<br><br><span class="hljs-comment"># 如果上面的命令报错，请尝试这条:</span><br>curl -Lo frpc &lt;下载地址&gt;<br><br><span class="hljs-comment"># Linux frpc 通常已经过 UPX 压缩，如需下载未压缩的版本请在下载地址尾部加上 _noupx</span><br><br></code></pre></td></tr></table></figure><!-- <center><img src='SakuraFrp内网穿透工具/终端演示.png' width=50%/></center> --><p><img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/终端演示.png#pic_center" alt></p><p>然后设置权限并校验文件是否有损坏：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 755 frpc<br><span class="hljs-built_in">ls</span> -<span class="hljs-built_in">ls</span> frpc<br><span class="hljs-built_in">md5sum</span> frpc<br></code></pre></td></tr></table></figure><!-- <center><img src='SakuraFrp内网穿透工具/校验.png' width=50%/></center> --><p><img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/校验.png#pic_center" alt></p><p>此时 <code>frpc</code> 就安装完成并可以正常使用了。可以用此命令查看 <code>frpc</code> 版本号：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">frpc -v<br></code></pre></td></tr></table></figure></p><h3 id="😉ubutnu-使用-frpc"><a href="#😉ubutnu-使用-frpc" class="headerlink" title="😉ubutnu 使用 frpc"></a>😉ubutnu 使用 frpc</h3><p>通过上节安装完成后，在终端使用命令开启frpc，注意加root权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo frpc<br></code></pre></td></tr></table></figure><br>在 Token 后面的文本框内输入访问密钥，然后使用 Tab 键切换到 Login 按钮并按 回车 键登录 (若终端支持也可使用鼠标进行操作)：</p><p><img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/login.png#pic_center" alt></p><p>登录成功后 TUI 会显示当前账户下的隧道列表，使用方向键选中想要启动的隧道，按空格标为绿色 (或使用鼠标直接点击隧道)：</p><p><img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/choice.png#pic_center" alt></p><blockquote><p>可以一次性启用多个隧道，但是这些隧道必须位于同一节点下,也可以直接选中节点来启用该节点下的所有隧道</p></blockquote><p>选择完毕后，即可启动隧道，相关启动参数会被保存到配置文件 frpc.ini 中，下次不带参数直接运行 frpc 时不再显示 TUI 而是直接启动隧道。</p><p><img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/frpc开启.png#pic_center" alt></p><p>至此，ubuntu的被控端部分设置完毕，远程只需要填入得到的公网ip或者域名即可。</p><p>例如，隧道启动成功后，使用vscode的远程remote插件连接ssh，那么只需要打开</p><p><img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/vscode_ssh.png#pic_center" alt>  </p><p>然后输入对应的ip和端口</p><p><img src="/2022/10/15/SakuraFrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/20221015201032.png#pic_center" alt>  </p><p>如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh YHS@2.tcp.vip.cpolar.cn -p 14884<br></code></pre></td></tr></table></figure></p><p><code>YHS</code>为被控电脑的用户名，<code>2.tcp.vip.cpolar.cn</code>为公网ip，<code>14884</code>为远程端口号。<br>这样就可以连接上ssh了。</p>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+gitee/github进行博客搭建</title>
      <link href="/2022/06/20/hexo-gitee-github%E8%BF%9B%E8%A1%8C%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/06/20/hexo-gitee-github%E8%BF%9B%E8%A1%8C%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>使用hexo工具和gitee/github搭建自己的博客。<br><span id="more"></span></p><h2 id="1-使用gitee（github）与hexo好处"><a href="#1-使用gitee（github）与hexo好处" class="headerlink" title="1. 使用gitee（github）与hexo好处"></a>1. 使用gitee（github）与hexo好处</h2><ul><li>gitee 是国内的网站，相较于 github 访问速度更快；</li><li>github是国外的网站，可以写一些比如科学上网之类的博客不至于发布不了。</li><li>gitee和github免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li><li>hexo是大家使用非常广泛的静态博客；</li><li>Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</li></ul><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><h3 id="2-1-安装Nodejs"><a href="#2-1-安装Nodejs" class="headerlink" title="2.1 安装Nodejs"></a>2.1 安装Nodejs</h3><p>Hexo 依赖 Node.js 和 NPM包管理，Node.js 安装后会自带NPM。因此，只需安装好node.js即可。</p><p>不管是macOS还是Windows系统，直接去<a href="https://nodejs.org/zh-cn/">nodejs官网</a>下载安装包下载安装即可，属于傻瓜式安装（点击下一步、下一步。。。）这里不过多介绍。</p><h3 id="2-2-安装git"><a href="#2-2-安装git" class="headerlink" title="2.2 安装git"></a>2.2 安装git</h3><p>由于后面我们需要用git管理仓库，所以这边需要安装git。方法也很简单，直接去<a href="https://git-scm.com/downloads">官网</a>下载即可，也属于傻瓜式安装。</p><p>安装完成后，你的右键菜单栏会出现这两个标签：<br><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/5405a50b983648439a26afb42fb74549.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_11,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>可以打开CMD，进入命令行，运行git命令看是否安装成功：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">git --version <br></code></pre></td></tr></table></figure><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/e134c476e62d436fb462d118e1c3868d.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"><br>能够输出版本号则表示正常。</p><h3 id="2-3-安装Hexo"><a href="#2-3-安装Hexo" class="headerlink" title="2.3 安装Hexo"></a>2.3 安装Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><blockquote><p>注：npm管理工具在安装好nodejs后就会自带，所以不需要额外安装。</p></blockquote><p>打开cmd命令行或者右键选择<code>git bash here</code>，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>即安装成功。</p><h2 id="3-建站"><a href="#3-建站" class="headerlink" title="3. 建站"></a>3. 建站</h2><p>hexo安装完成后，即可开始初始化hexo项目，进行建站。</p><ul><li>进入到你打算存放<strong>博客源代码</strong>的目录下，执行初始化命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 初始化文件夹名为 hexo_blog</span><br>hexo init hexo_blog<br><span class="hljs-built_in">cd</span> hexo_blog<br>npm install<br></code></pre></td></tr></table></figure><p><code>hexo_blog</code>为存放博客的文件夹名字，你可以按照自己需求取，例如我这里取得就是<code>hexo_blog</code>。</p><p>初始化完成后，hexo_blog文件夹下的文件目录大致如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">.<br>├── _config.yml  <span class="hljs-comment"># 网站的配置信息</span><br>├── node_modules  <span class="hljs-comment"># 应用依赖信息</span><br>├── package-lock.json<br>├── package.json  <span class="hljs-comment"># 依赖包</span><br>├── scaffolds  <span class="hljs-comment"># 模板文件</span><br>├── <span class="hljs-built_in">source</span>  <span class="hljs-comment"># 资源文件夹是存放用户资源的地方</span><br>│   ├── _drafts  <span class="hljs-comment"># 草稿文件夹，刚初始化时可能不存在</span><br>│   ├── _posts  <span class="hljs-comment"># 文章/帖子源码列表</span><br>└── themes  <span class="hljs-comment"># 博客主题</span><br></code></pre></td></tr></table></figure><p>其中<code>_config.yml</code>文件是配置文件，以后需要经常打交道的。里面的各个参数可以参考<a href="https://hexo.io/zh-cn/docs/configuration">网站</a>。<code>source</code>文件夹是存放用户资源的地方，即以后你写的博客都存放在这里。</p><h2 id="4-启动"><a href="#4-启动" class="headerlink" title="4. 启动"></a>4. 启动</h2><p>初始化项目后默认会安装相关的依赖，接着在命令行输入如下命令即可在本地运行查看博客 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动服务，默认端口为 4000，启动服务后可以在浏览器输入 `http://localhost:4000` 查看效果</span><br>hexo server<br><span class="hljs-comment"># 简写方式</span><br>hexo s<br><span class="hljs-comment"># 还可以使用 -p, 指定 8888端口</span><br>hexo s -p 8888<br></code></pre></td></tr></table></figure><h2 id="5-配置"><a href="#5-配置" class="headerlink" title="5. 配置"></a>5. 配置</h2><p>建站完成后我们需要进行 配置，hexo 中主要有两项配置。</p><ul><li>站点配置文件，路径为 <code>/_config.yml</code> ；</li><li>主题配置文件 ，路径是 <code>/themes/(自己下载的主题)/_config.yml</code> 。</li></ul><p>站点配置文件主要是有以下几个基础选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Hexo Configuration</span><br><span class="hljs-comment"># 网站主标题，SEO元素之一</span><br>title: blog<br><span class="hljs-comment"># 网站副标题，可选</span><br>subtitle:<br><span class="hljs-comment"># 网站描述, SEO元素之一，用于告诉搜索引擎关于这个站点的描述</span><br>description: <br><span class="hljs-comment"># 网站的关键词</span><br>keywords: <br><span class="hljs-comment"># 网站作者</span><br>author: chh3213<br><span class="hljs-comment"># 网站使用的语言, 由于 Hexo 具备多语言配置，默认为英文，若需要中文语言，则修改如下</span><br>language: zh-CN<br></code></pre></td></tr></table></figure><p>其余配置，可以具体参考hexo的<a href="https://hexo.io/zh-cn/docs/configuration">文档</a>。</p><h3 id="5-1-主题配置"><a href="#5-1-主题配置" class="headerlink" title="5.1 主题配置"></a>5.1 主题配置</h3><p>熟悉了博客系统的操作后，接下来就是美化博客。Hexo 支持主题，我们可以根据<a href="https://hexo.io/zh-cn/docs/themes.html">官网的创建主题教程</a>自己来设计，也可以直接在<a href="https://hexo.io/themes/">主题商城</a> 中找现成的主题。</p><p>例如，笔者这边选择了<a href="https://github.com/litten/hexo-theme-yilia">hexo-theme-yilia</a></p><p>主题配置很简单，进入<a href="https://github.com/litten/hexo-theme-yilia">hexo-theme-yilia</a> 的仓库，复制git clone的地址。</p><p>然后在<code>hexo_blog</code>文件夹目录下，git bash中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia<br></code></pre></td></tr></table></figure><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/e5b734cc94ae43ec91a2ac1bbd315fe9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>下载后的主题在<code>hexo_blog</code>文件夹目录下的 <code>themes</code> 里面，如图：<br><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/d19b756c2f294bbda9ce2be2532b22c1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"><br>然后在 站点配置文件(<code>/_config.yml</code>) 中修改里面的 <code>theme: landscape</code> 为 <code>theme: yilia</code> 。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">yilia</span><br></code></pre></td></tr></table></figure><p>最后启动主题即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean          <span class="hljs-comment">#  启动主题前需要清除缓存与已部署的文件</span><br>hexo generate       <span class="hljs-comment"># 生成静态网页</span><br>hexo s <span class="hljs-comment"># 本地查看博客</span><br></code></pre></td></tr></table></figure><h2 id="6-部署到gitee-pages"><a href="#6-部署到gitee-pages" class="headerlink" title="6. 部署到gitee pages"></a>6. 部署到gitee pages</h2><p>我们使用git进行部署，可以将网站部署至私人服务器、也可以部署到免费的<code>github pages</code>或者<code>gitee pages</code>上。这边笔者选择的是<code>gitee pages</code>，因为<code>github pages</code>有时候不用点科学手段进不去。。。</p><h3 id="6-1-创建一个gitee仓库"><a href="#6-1-创建一个gitee仓库" class="headerlink" title="6.1 创建一个gitee仓库"></a>6.1 创建一个gitee仓库</h3><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/4061678a8cbf4ecf8c0eba470e60b6d3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"> <img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/2fb7cdc9c4ce45ef8977de963812c9e0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><blockquote><p>注意：这里需要注意的一点是，如果你想直接通过域名就可以访问到你的博客个人网站，创建仓库的时候仓库名要和用户名保持一致。例如，我的gitee用户名为<code>caohuanhui</code>，我创建的仓库名是<code>caohuanhui</code>，那我访问的时候直接使用<code>https://caohuanhui.gitee.io/</code>就可以直接访问了。但是，如果我创建的仓库名和用户名不一样，比如我创建仓库的时候，仓库名为blog，那我访问的时候，就必须要域名+仓库名才能访问，如<code>https://caohuanhui.gitee.io/blog</code>。</p><p>至于是否选择开源，这边建议选择私有，因为这个仓库，还可以用来进行博客源代码备份，后面会提到。</p></blockquote><p>点击创建即可，成功创建一个gitee仓库。</p><h3 id="6-2-配置路径"><a href="#6-2-配置路径" class="headerlink" title="6.2 配置路径"></a>6.2 配置路径</h3><ul><li><p>进入刚创建的仓库，点击 <code>克隆/下载</code>，复制 Https 地址</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/cf1f7cdca9194330978e24b8ae763b47.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy">==注==：这边并没有强制要求选择https方式，选择ssh方式也是可以的。</p></li><li><p>打开博客根目录，修改<code>_config.yml</code> 文件<br><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/3b64c7c0cd074a1b971ab4abda5a45c4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"><br>主要修改以下内容：</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://gitee.com/caohuanhui/caohuanhui.git</span>  <span class="hljs-comment"># 刚才复制的 Https 地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">pages</span>  <span class="hljs-comment"># 部署到 pages 分支，如果该分支不存在，就会自动创建它</span><br></code></pre></td></tr></table></figure><p>接下来我们还需要安装一个插件，在 <code>git bash</code> 下输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>如果我们没有安装这个插件，此时直接执行部署的命令 <code>hexo g -d</code> 的话一般会报如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Deployer not found: gitee 或者 Deployer not found: git<br></code></pre></td></tr></table></figure><h3 id="6-3-开启GiteePages服务"><a href="#6-3-开启GiteePages服务" class="headerlink" title="6.3 开启GiteePages服务"></a>6.3 开启GiteePages服务</h3><p>进入到刚才创建的gitee仓库，找到<code>服务</code>，点击<code>Gitee Pages</code>开启<code>GiteePages</code>服务</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/ff88f5062dbf488ba65c64556bccf8cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"><br>如果第一次开启<code>Gitee Pages</code>服务，会让你上传身份证进行验证，验证通过后即可使用。</p><p>进入到页面之后，选择<code>GiteePages</code>服务需要部署的分支，例如我这里要部署的分支为<code>pages</code>。推荐勾选上<code>强制使用HTTPS</code>，选择完毕之后点击启动（更新）便可开启GiteePages服务。</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/44ea4dc9e28849b0918786ba23e719db.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>接着开始部署。如果你还没配置git账号的话，会提示你输入账号密码，输入正确的账号密码后就部署成功了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g -d<br></code></pre></td></tr></table></figure><p>每次部署成功后，都需要到GiteePages上点击更新。</p><h3 id="6-4-github-pages部署"><a href="#6-4-github-pages部署" class="headerlink" title="6.4 github pages部署"></a>6.4 github pages部署</h3><p>如果使用github pages，则步骤 类似。</p><ul><li><p>在 GitHub 新建一个名称为 <code>{username}.github.io</code>的仓库，<code>username</code>是你的github用户名</p><p>打开根目录下的 _config.yml 文件，找到 Deployment ，修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://github.com/CHH3213/CHH3213.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>与giteePages 完全一致，只是地址不同，以及branch这里一定要是master分支。</p></li><li><p>启动GitHub Pages</p><p>在博客仓库的Settings界面，下拉找到GitHub Pages，生成博客网址<br><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/b7475a7eac1e43869154be0cd09c5787.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/abf5c3760cc247b5a8c7895f78ec5451.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"><br>部署成功后就可以通过<code>https://{github用户名}.github.io/</code> 访问个人博客了</p></li></ul><blockquote><p>在这里，要知道，GitHub Pages有两种类型：<code>User/Organization Pages</code> 和 <code>Project Pages</code>，而笔者所使用的是<code>User Pages</code>。<br>简单来说，User Pages 与 Project Pages的区别是：</p><ul><li><p>User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。</p></li><li><p>用于存放 User Pages 的仓库必须使用<code>username.github.io</code>的命名规则，而 Project Pages则没有特殊的要求。</p></li><li>User Pages 将使用仓库的 <code>master</code> 分支，而 Project Pages 将使用 <code>gh-pages</code> 分支。</li><li>User Pages 通过 <code>http(s)://username.github.io</code> 进行访问，而 Projects  Pages通过 <code>http(s)://username.github.io/projectname</code> 进行访问。</li></ul></blockquote><h3 id="6-4-博客源代码备份"><a href="#6-4-博客源代码备份" class="headerlink" title="6.4. 博客源代码备份"></a>6.4. 博客源代码备份</h3><p>至于上述博客源代码的备份（即<code>hexo_blog</code>文件夹下的备份），笔者同样使用的是gitee仓库。</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/5c0c7a1f3a944ff4b559837f67f72343.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"><br>为了高效利用之前创建的部署gitee pages的仓库，所以这边并没有再额外创建一个仓库存放源代码，而是创建了<strong>两个分支</strong>，<strong>一个分支（hexo）用来存放源代码，一个分支（pages）用来存放博客部署后生成的文件</strong>，其中，存放博客源代码文件的分支设为主分支，如下图所示。<br><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/da05861394544d7583b28358356d6c2a.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>然后只需要通过一系列git操作，将本地源代码上传至仓库的hexo分支即可（这部分git基础操作就不在这介绍了）。</p><h2 id="7-写作"><a href="#7-写作" class="headerlink" title="7. 写作"></a>7. 写作</h2><p>一般我们都会使用 <code>hexo new &lt;title&gt;</code> 来建立文章，这种建立方法会将新文章建立在 <code>source/_posts</code> 目录下，当使用 <code>hexo generate</code> 命令编译 时，会将其 HTML 结果编译在 public 目录下，之后 hexo deploy 将会把 public 目录下所有文章部署到 GitHub，这是整个 Hexo 流程。</p><p>这种建立文章方式的缺点是：若我们同时编辑多篇文章，只要其中一篇文章尚未编辑完成，也会随着 <code>hexo deploy</code> 一起部署到 GitHub，也就是 GitHub 可能会看到我们尚未完成的文章。</p><p>笔者个人的写作习惯是：</p><ul><li>创建草稿 (drafts )</li><li>在草稿上进行写作</li><li>整理细节并在本地服务器上查看效果(server)</li><li>发布至正式的帖子上</li><li>生成静态文件并部署</li></ul><h3 id="7-1-创建草稿"><a href="#7-1-创建草稿" class="headerlink" title="7.1 创建草稿"></a>7.1 创建草稿</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># hexo new draft &lt;title&gt;</span><br>hexo new draft 博客名称<br></code></pre></td></tr></table></figure><p>Hexo 提供 draft 机制，它将新文章将建立在 <code>source/_drafts</code> 目录下。生成的文件<code>博客名称.md</code> 是一个 markdown 文件，默认的草稿模板内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: 博客名称<br>tags: <br>---<br></code></pre></td></tr></table></figure><blockquote><p>在<code>/scaffolds</code>目录下可以修改draft、page、post(草稿、主页面、发布的文章)的模板。</p></blockquote><h3 id="7-2-在本地服务器预览草稿"><a href="#7-2-在本地服务器预览草稿" class="headerlink" title="7.2 在本地服务器预览草稿"></a>7.2 在本地服务器预览草稿</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s --draft<br></code></pre></td></tr></table></figure><p>Hexo 的 <code>Hexo server</code> 另外提供 <code>--draft</code> 参数，这让我们可以达到一边编辑 markdown 文章，一边使用浏览器预览的目的。</p><h3 id="7-3-发布草稿"><a href="#7-3-发布草稿" class="headerlink" title="7.3 发布草稿"></a>7.3 发布草稿</h3><p>如果我们在本地服务器上校对完草稿细节后，可以将草稿发布为文章，否则在后续生成博客静态文件时不会被打包出来：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># hexo publish [layout] &lt;filename&gt;</span><br>hexo publish post 博客名称<br></code></pre></td></tr></table></figure><p>输入命令后你可以发现发布的文章被转移到了<code>source/_posts/</code>上，这样就完成了本地的文章发布。</p><h3 id="7-4-生成静态文件并部署"><a href="#7-4-生成静态文件并部署" class="headerlink" title="7.4 生成静态文件并部署"></a>7.4 生成静态文件并部署</h3><p> Hexo框架的一项工作就是将源文件 markdown 最后生成为 HTML：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 生成文件</span><br>hexo g<br><span class="hljs-comment"># 监控文件变化，并生成静态文件</span><br>hexo g --watch<br><span class="hljs-comment"># 生成文件并部署</span><br>hexo g -d<br></code></pre></td></tr></table></figure><p>以上便是完整的部署过程了！</p><h2 id="8-常用hexo命令"><a href="#8-常用hexo命令" class="headerlink" title="8. 常用hexo命令"></a>8. 常用hexo命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">"postName"</span> <span class="hljs-comment">#新建文章</span><br>hexo new page <span class="hljs-string">"pageName"</span> <span class="hljs-comment">#新建页面</span><br>hexo generate <span class="hljs-comment">#生成静态页面至public目录</span><br>hexo server <span class="hljs-comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span><br>hexo deploy <span class="hljs-comment">#部署到GitHub</span><br>hexo <span class="hljs-built_in">help</span>  <span class="hljs-comment"># 查看帮助</span><br>hexo version  <span class="hljs-comment">#查看Hexo的版本</span><br>hexo clean <span class="hljs-comment">#清楚缓存</span><br></code></pre></td></tr></table></figure><p>缩写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy<br></code></pre></td></tr></table></figure><p>组合命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s -g <span class="hljs-comment">#生成并本地预览</span><br>hexo g -d <span class="hljs-comment">#生成并部署</span><br>hexo clean &amp; hexo generate &amp; hexo server <span class="hljs-comment">#重新生成并本地预览</span><br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></li><li><a href="https://su-lemon.gitee.io/post/5bd42e8c.html">https://su-lemon.gitee.io/post/5bd42e8c.html</a></li><li><a href="https://developer.aliyun.com/article/794909">https://developer.aliyun.com/article/794909</a></li><li><a href="https://singleplus.gitee.io/blog/2020/06/22/Gitee-Hexo%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%AD%E7%9A%84%E5%9D%91/">Gitee+Hexo配置个人博客中的坑</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客主页美化</title>
      <link href="/2022/06/12/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/"/>
      <url>/2022/06/12/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>搭建的hexo博客的美化技巧。<br><span id="more"></span></p><p>除了<a href="https://docs.nexmoe.com/v3.2/">主题自带的技巧</a>外，这边再总结一些我用到的技巧。</p><h2 id="文章封面生成随机图片"><a href="#文章封面生成随机图片" class="headerlink" title="文章封面生成随机图片"></a>文章封面生成随机图片</h2><p>使用: 只要请求图片时, 将路径改为API提供的路径即可.</p><p>对于Markdown来说:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[image_infp]</span>(API_URL)<br></code></pre></td></tr></table></figure><p>对于HTML来说是修改src属性:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;API_URL&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>但是仅仅这样做会出现一个问题:</p><p>当前页面使用同一个api链接的文章, 图片显示的都是同一张!(说好的随机呢?)</p><p>问题就出现在, 发起请求时, 由于链接地址是同一个, 实际上即使同一个页面中有多个(相同)图片链接, 也仅仅发起一次请求, 所以也就返回一张图片了!</p><p>所以只要修改链接不同即可!</p><p>以本博客使用到的api为例: <a href="http://api.mtyqx.cn/tapi/random.php">http://api.mtyqx.cn/tapi/random.php</a></p><p>可以在末尾添加<code>?x</code>, 其中<code>x</code>是一个数字, 如: <a href="http://api.mtyqx.cn/tapi/random.php?54615">http://api.mtyqx.cn/tapi/random.php?54615</a></p><p>此时这是两个完全不同的请求, 所以显示的图片即为不同了!</p><h3 id="附随机图片的一些API"><a href="#附随机图片的一些API" class="headerlink" title="附随机图片的一些API"></a>附随机图片的一些API</h3><ul><li>二次元: <a href="https://img.paulzzh.tech/touhou/random">https://img.paulzzh.tech/touhou/random</a></li><li>二次元: <a href="http://www.dmoe.cc/random.php">http://www.dmoe.cc/random.php</a></li><li>二次元：<a href="http://api.mtyqx.cn/tapi/random.php">http://api.mtyqx.cn/tapi/random.php</a></li></ul><h2 id="添加动漫人物-看板娘"><a href="#添加动漫人物-看板娘" class="headerlink" title="添加动漫人物(看板娘)"></a>添加动漫人物(看板娘)</h2><p>Hexo博客本身支持看板娘的，三步即可。</p><p>第一步，在主目录下执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-helper-live2d<br></code></pre></td></tr></table></figure><p>第二步，同样在主目录下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install live2d-widget-model-shizuku<br></code></pre></td></tr></table></figure><p><code>live2d-widget-model-shizuku</code>是可选项。可选的模型如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">live2d-widget-model-chitose</span><br><span class="hljs-string">live2d-widget-model-epsilon2_1</span><br><span class="hljs-string">live2d-widget-model-gf</span><br><span class="hljs-string">live2d-widget-model-haru</span><br><span class="hljs-string">live2d-widget-model-haruto</span><br><span class="hljs-string">live2d-widget-model-hibiki</span><br><span class="hljs-string">live2d-widget-model-hijiki</span><br><span class="hljs-string">live2d-widget-model-izumi</span><br><span class="hljs-string">live2d-widget-model-koharu</span><br><span class="hljs-string">live2d-widget-model-miku</span><br><span class="hljs-string">live2d-widget-model-ni-j</span><br><span class="hljs-string">live2d-widget-model-nico</span><br><span class="hljs-string">live2d-widget-model-nietzsche</span><br><span class="hljs-string">live2d-widget-model-nipsilon</span><br><span class="hljs-string">live2d-widget-model-nito</span><br><span class="hljs-string">live2d-widget-model-shizuku</span><br><span class="hljs-string">live2d-widget-model-tororo</span><br><span class="hljs-string">live2d-widget-model-tsumiki</span><br><span class="hljs-string">live2d-widget-model-unitychan</span><br><span class="hljs-string">live2d-widget-model-wanko</span><br><span class="hljs-string">live2d-widget-model-z16</span><br></code></pre></td></tr></table></figure><p>第三步，在根目录配置文件（_config.yml）中添加如下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">live2d:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">scriptFrom:</span> <span class="hljs-string">local</span><br>  <span class="hljs-attr">pluginRootPath:</span> <span class="hljs-string">live2dw/</span><br>  <span class="hljs-attr">pluginJsPath:</span> <span class="hljs-string">lib/</span><br>  <span class="hljs-attr">pluginModelPath:</span> <span class="hljs-string">assets/</span><br>  <span class="hljs-attr">tagMode:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">log:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">model:</span><br>    <span class="hljs-attr">use:</span> <span class="hljs-string">live2d-widget-model-shizuku</span><br>  <span class="hljs-attr">display:</span><br>    <span class="hljs-attr">position:</span> <span class="hljs-string">right</span><br>    <span class="hljs-attr">width:</span> <span class="hljs-number">150</span><br>    <span class="hljs-attr">height:</span> <span class="hljs-number">300</span><br>  <span class="hljs-attr">mobile:</span><br>    <span class="hljs-attr">show:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">react:</span><br>    <span class="hljs-attr">opacity:</span> <span class="hljs-number">0.7</span><br></code></pre></td></tr></table></figure><p>然后重新部署即可。</p><p>hexo博客本身看板娘角色比较单调，stevenjoezhang大佬写了一个可以说话，可以换装的看板娘项目并开源，使用起来也是非常的方便。下面是Nexmoe主题下的安装步骤。</p><ol><li><p>下载大神的仓库<a href="https://github.com/stevenjoezhang/live2d-widget">live2d-widget</a>到主目录<code>\themes\nexmoe\source</code>下，修改<code>live2d-widget</code>目录下的<code>autoload.js</code>文件中的路径</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 注意：live2d_path 参数应使用绝对路径</span><br><span class="hljs-comment">//const live2d_path = &quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/&quot;;</span><br><span class="hljs-type">const</span> live2d_path = <span class="hljs-string">&quot;/live2d-widget/&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>往<code>\themes\nexmoe\layout\_partial\_post</code>目录下的<code>header.ejs</code>添加以下代码(在第一个<code>div</code>标签内):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 注意：live2d_path 参数应使用绝对路径</span><br><span class="hljs-comment">//const live2d_path = &quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/&quot;;</span><br><span class="hljs-type">const</span> live2d_path = <span class="hljs-string">&quot;/live2d-widget/&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>在根目录配置文件（_config.yml）中添加如下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">live2d:</span> <span class="hljs-comment">##自定义看板娘动画</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ol><p>然后重新部署即可。想修改看板娘大小、位置、格式、文本内容等，可查看并修改 <code>waifu-tips.js</code> 、 <code>waifu-tips.json</code> 和 <code>waifu.css</code>。其实看板娘可以侧边隐藏，对样本的修改影响也不大。</p><h2 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h2><p>本篇博客使用的主题是<code>nexmoe</code>主题，它的配置评论的方式如下（gitalk为例）：</p><ul><li><p>在<a href="https://github.com/settings/applications/new">GitHub</a>上申请<code>OAuth application</code><br><img src="/2022/06/12/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/gitalk_appl.png" alt>  </p></li><li><p>点击生成后，记住<code>Client ID</code>和 <code>Client Secret</code></p></li><li><p>在<code>themes</code>文件夹下的<code>_config.nexmoe.yml</code>文件中，把刚才的<code>Client ID</code>和 <code>Client Secret</code>填在下面方框：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">slotComment: &#x27;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gitalk-container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> gitalk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gitalk</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-attr">clientID</span>: <span class="hljs-string">&quot;&quot;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">clientSecret</span>: <span class="hljs-string">&quot;&quot;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">repo</span>: <span class="hljs-string">&quot;CHH3213.github.io&quot;</span>,      </span><br><span class="language-javascript">  <span class="hljs-attr">owner</span>: <span class="hljs-string">&quot;CHH3213&quot;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">admin</span>: <span class="hljs-string">&quot;CHH3213&quot;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">id</span>:  <span class="hljs-built_in">decodeURI</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">pathname</span>)     </span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">gitalk.<span class="hljs-title function_">render</span>(<span class="hljs-string">&quot;gitalk-container&quot;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>&#x27;<br></code></pre></td></tr></table></figure><p>即下图所示：<br><img src="/2022/06/12/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/config.png" alt><br>文章代码中出现过这两个链接</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这两个链接指引的文件是配置gitalk的代码，可以下载后保存于自己的网站并修改文章中的链接，获得相同的效果。</p></li><li><p>然后配置完成后，在需要开启评论框的文章中，开启评论：<code>comments: true</code>即可。</p></li><li>最后，<code>hexo g -d</code>部署生成后登录评论框初始化即可。</li></ul><blockquote><p><code>nexmoe</code>主题的评论已经支持了任何评论系统，在<code>themes/nexmoe/layout/post.ejs</code>文件中可以看到，它是这么开启的<br><img src="/2022/06/12/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/slot.png" alt>  </p></blockquote><h2 id="添加页面点击出现爱心特效"><a href="#添加页面点击出现爱心特效" class="headerlink" title="添加页面点击出现爱心特效"></a>添加页面点击出现爱心特效</h2><ul><li><p>在 <code>themes/你选择的主题/source/js</code> 下新建文件 <code>heart.js</code>文件 ，添加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs js">!(<span class="hljs-keyword">function</span> (<span class="hljs-params">e, t, a</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">n</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">c</span>(<br>      <span class="hljs-string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span><br>    ),<br>      <span class="hljs-title function_">o</span>(),<br>      <span class="hljs-title function_">r</span>();<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">r</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e = <span class="hljs-number">0</span>; e &lt; d.<span class="hljs-property">length</span>; e++)<br>      d[e].<span class="hljs-property">alpha</span> &lt;= <span class="hljs-number">0</span><br>        ? (t.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(d[e].<span class="hljs-property">el</span>), d.<span class="hljs-title function_">splice</span>(e, <span class="hljs-number">1</span>))<br>        : (d[e].<span class="hljs-property">y</span>--,<br>          (d[e].<span class="hljs-property">scale</span> += <span class="hljs-number">0.004</span>),<br>          (d[e].<span class="hljs-property">alpha</span> -= <span class="hljs-number">0.013</span>),<br>          (d[e].<span class="hljs-property">el</span>.<span class="hljs-property">style</span>.<span class="hljs-property">cssText</span> =<br>            <span class="hljs-string">&quot;left:&quot;</span> +<br>            d[e].<span class="hljs-property">x</span> +<br>            <span class="hljs-string">&quot;px;top:&quot;</span> +<br>            d[e].<span class="hljs-property">y</span> +<br>            <span class="hljs-string">&quot;px;opacity:&quot;</span> +<br>            d[e].<span class="hljs-property">alpha</span> +<br>            <span class="hljs-string">&quot;;transform:scale(&quot;</span> +<br>            d[e].<span class="hljs-property">scale</span> +<br>            <span class="hljs-string">&quot;,&quot;</span> +<br>            d[e].<span class="hljs-property">scale</span> +<br>            <span class="hljs-string">&quot;) rotate(45deg);background:&quot;</span> +<br>            d[e].<span class="hljs-property">color</span> +<br>            <span class="hljs-string">&quot;;z-index:99999&quot;</span>));<br>    <span class="hljs-title function_">requestAnimationFrame</span>(r);<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">o</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> t = <span class="hljs-string">&quot;function&quot;</span> == <span class="hljs-keyword">typeof</span> e.<span class="hljs-property">onclick</span> &amp;&amp; e.<span class="hljs-property">onclick</span>;<br>    e.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>      t &amp;&amp; <span class="hljs-title function_">t</span>(), <span class="hljs-title function_">i</span>(e);<br>    &#125;;<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">i</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">var</span> a = t.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>    (a.<span class="hljs-property">className</span> = <span class="hljs-string">&quot;heart&quot;</span>),<br>      d.<span class="hljs-title function_">push</span>(&#123;<br>        <span class="hljs-attr">el</span>: a,<br>        <span class="hljs-attr">x</span>: e.<span class="hljs-property">clientX</span> - <span class="hljs-number">5</span>,<br>        <span class="hljs-attr">y</span>: e.<span class="hljs-property">clientY</span> - <span class="hljs-number">5</span>,<br>        <span class="hljs-attr">scale</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">alpha</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">color</span>: <span class="hljs-title function_">s</span>(),<br>      &#125;),<br>      t.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(a);<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">var</span> a = t.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;style&quot;</span>);<br>    a.<span class="hljs-property">type</span> = <span class="hljs-string">&quot;text/css&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      a.<span class="hljs-title function_">appendChild</span>(t.<span class="hljs-title function_">createTextNode</span>(e));<br>    &#125; <span class="hljs-keyword">catch</span> (t) &#123;<br>      a.<span class="hljs-property">styleSheet</span>.<span class="hljs-property">cssText</span> = e;<br>    &#125;<br>    t.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;head&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(a);<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">s</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="hljs-string">&quot;rgb(&quot;</span> +<br>      ~~(<span class="hljs-number">255</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()) +<br>      <span class="hljs-string">&quot;,&quot;</span> +<br>      ~~(<span class="hljs-number">255</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()) +<br>      <span class="hljs-string">&quot;,&quot;</span> +<br>      ~~(<span class="hljs-number">255</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()) +<br>      <span class="hljs-string">&quot;)&quot;</span><br>    );<br>  &#125;<br>  <span class="hljs-keyword">var</span> d = [];<br>  (e.<span class="hljs-property">requestAnimationFrame</span> = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      e.<span class="hljs-property">requestAnimationFrame</span> ||<br>      e.<span class="hljs-property">webkitRequestAnimationFrame</span> ||<br>      e.<span class="hljs-property">mozRequestAnimationFrame</span> ||<br>      e.<span class="hljs-property">oRequestAnimationFrame</span> ||<br>      e.<span class="hljs-property">msRequestAnimationFrame</span> ||<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(e, <span class="hljs-number">1e3</span> / <span class="hljs-number">60</span>);<br>      &#125;<br>    );<br>  &#125;)()),<br>    <span class="hljs-title function_">n</span>();<br>&#125;)(<span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">document</span>);<br></code></pre></td></tr></table></figure></li><li><p>在<code>themes/你选择的主题/layout/layout.ejs</code>文件的<code>body</code>标签内添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 页面点击小红心-- 20221025--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/heart.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>重新部署生成后，即可出现特效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp; hexo generate &amp; hexo server<br></code></pre></td></tr></table></figure><!-- ![](博客主页美化/heart.png)   --></li></ul><h2 id="浏览器网页标题特效"><a href="#浏览器网页标题特效" class="headerlink" title="浏览器网页标题特效"></a>浏览器网页标题特效</h2><ul><li><p>当用户访问你的博客时点击到了其他网页，我们可以让网页标题产生特效，呼唤用户回来，首先在目录 <code>themes/你选择的主题/source/js</code>  下新建一个 <code>funnyTitle.js</code> 文件，在里面填写如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!--浏览器搞笑标题--&gt;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">OriginTitle</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span>;<br><span class="hljs-keyword">var</span> titleTime;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;visibilitychange&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">hidden</span>) &#123;<br>        $(<span class="hljs-string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-string">&quot;/img/trhx2.png&quot;</span>);<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;ヽ(●-`Д´-)ノ我在这等你！&#x27;</span>;<br>        <span class="hljs-built_in">clearTimeout</span>(titleTime);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        $(<span class="hljs-string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-string">&quot;/img/trhx2.png&quot;</span>);<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;ヾ(Ő∀Ő3)ノ谢谢你回来！&#x27;</span> + <span class="hljs-title class_">OriginTitle</span>;<br>        titleTime = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-title class_">OriginTitle</span>;<br>        &#125;, <span class="hljs-number">2000</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>在<code>themes/你选择的主题/layout/layout.ejs</code>文件的<code>body</code>标签内添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--搞笑title--&gt;</span>&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/funnyTitle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>重新部署即可。</li></ul><h2 id="添加代码块复制功能"><a href="#添加代码块复制功能" class="headerlink" title="添加代码块复制功能"></a>添加代码块复制功能</h2><p>博客主题本身并没有集成代码块复制功能，因此这里给主题添加这个功能。</p><blockquote><p>此方法对所有没有代码块复制功能的主题都有效，基于 <a href="https://github.com/zenorocha/clipboard.js">https://github.com/zenorocha/clipboard.js</a> 实现.</p><p>参考<a href="https://blog.csdn.net/qq_41186928/article/details/105193552">博客</a>。</p></blockquote><ul><li><p>下载<a href="https://raw.githubusercontent.com/zenorocha/clipboard.js/master/dist/clipboard.min.js">js文件</a>保存到<code>themes/你的主题/source/js</code>目录下，重命名为<code>clipboard-min.js</code>。</p></li><li><p>在<code>themes/你的主题/source/js</code>目录下，创建<code>clipboard-use.js</code>，文件，添加内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;.highlight&quot;</span>).<span class="hljs-title function_">wrap</span>(<span class="hljs-string">&quot;&lt;div class=&#x27;code-wrapper&#x27; style=&#x27;position:relative&#x27;&gt;&lt;/div&gt;&quot;</span>);<br><span class="hljs-comment">/*页面载入完成后，创建复制按钮*/</span><br>!<span class="hljs-keyword">function</span> (<span class="hljs-params">e, t, a</span>) &#123;<br>    <span class="hljs-comment">/* code */</span><br>    <span class="hljs-keyword">var</span> initCopyCode = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> copyHtml = <span class="hljs-string">&#x27;&#x27;</span>;<br>        copyHtml += <span class="hljs-string">&#x27;&lt;button class=&quot;btn-copy&quot; data-clipboard-snippet=&quot;&quot;&gt;&#x27;</span>;<br>        copyHtml += <span class="hljs-string">&#x27;  &lt;i class=&quot;fa fa-clipboard&quot;&gt;&lt;/i&gt;&lt;span&gt;复制&lt;/span&gt;&#x27;</span>;<br>        copyHtml += <span class="hljs-string">&#x27;&lt;/button&gt;&#x27;</span>;<br>        $(<span class="hljs-string">&quot;.highlight .code&quot;</span>).<span class="hljs-title function_">before</span>(copyHtml);<br>        <span class="hljs-keyword">var</span> clipboard = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClipboardJS</span>(<span class="hljs-string">&#x27;.btn-copy&#x27;</span>, &#123;<br>            <span class="hljs-attr">target</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">trigger</span>) &#123;<br>                <span class="hljs-keyword">return</span> trigger.<span class="hljs-property">nextElementSibling</span>;<br>            &#125;<br>        &#125;);<br>        clipboard.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>            e.<span class="hljs-property">trigger</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&lt;i class=&#x27;fa fa-clipboard&#x27;&gt;&lt;/i&gt;&lt;span&gt;复制成功&lt;/span&gt;&quot;</span><br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                e.<span class="hljs-property">trigger</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&lt;i class=&#x27;fa fa-clipboard&#x27;&gt;&lt;/i&gt;&lt;span&gt;复制&lt;/span&gt;&quot;</span><br>            &#125;, <span class="hljs-number">1000</span>)<br>          <br>            e.<span class="hljs-title function_">clearSelection</span>();<br>        &#125;);<br>        clipboard.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>            e.<span class="hljs-property">trigger</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&lt;i class=&#x27;fa fa-clipboard&#x27;&gt;&lt;/i&gt;&lt;span&gt;复制失败&lt;/span&gt;&quot;</span><br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                e.<span class="hljs-property">trigger</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&lt;i class=&#x27;fa fa-clipboard&#x27;&gt;&lt;/i&gt;&lt;span&gt;复制&lt;/span&gt;&quot;</span><br>            &#125;, <span class="hljs-number">1000</span>)<br>            e.<span class="hljs-title function_">clearSelection</span>();<br>        &#125;);<br>    &#125;<br>    <span class="hljs-title function_">initCopyCode</span>();<br>&#125;(<span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">document</span>);<br></code></pre></td></tr></table></figure><blockquote><p> 因为css的”子绝父相”在父元素有滚动条的情况下子元素会跟随父元素滚动，所以使用 hexo添加复制代码块的功能的代码会有代码块横向超出时出现“bug”的情况，解决方案是使用js动态给代码块元素添加父元素(相对定位)作为复制按钮子元素的定位参照父元素，而代码块元素则起到滚动元素的作用。即上文代码中的第一行代码。<br> clipboard提供了复制成功/失败(success/error)后的自定义事件触发，故可以通过这两个方法修改按钮文字，再通过setTimeout()方法在复制1s后再次显示“复制”</p></blockquote></li><li><p>在<code>themes/你的主题/source/css/style.css</code>或者<code>themes/你的主题/source/css/style.styl</code> 样式（有的主题是<code>css格式</code>，有的是<code>styl格式</code>，差别并不大。）中添加如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs css">//代码块复制按钮<br><span class="hljs-selector-class">.btn-copy</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">cursor</span>: pointer;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#eee</span>;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">#fcfcfc</span>, <span class="hljs-number">#eee</span>);<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#d5d5d5</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;<br>    -webkit-user-select: none;<br>    -moz-user-select: none;<br>    -ms-user-select: none;<br>    user-select: none;<br>    -webkit-appearance: none;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span>;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>    -webkit-<span class="hljs-attribute">transition</span>: opacity .<span class="hljs-number">3s</span> ease-in-out;<br>    -o-<span class="hljs-attribute">transition</span>: opacity .<span class="hljs-number">3s</span> ease-in-out;<br>    <span class="hljs-attribute">transition</span>: opacity .<span class="hljs-number">3s</span> ease-in-out;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">2px</span> <span class="hljs-number">6px</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.btn-copy</span> <span class="hljs-selector-tag">span</span> &#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">5px</span><br>&#125;<br><br><span class="hljs-selector-class">.code-wrapper</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.btn-copy</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">100</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>引用js文件，将以下代码加入到你的<code>layout布局文件</code>（例如，nexmoe主题是在<code>themes/你的主题/layout/layout.ejs</code>文件）的<code>body标签</code>内：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 代码块复制功能,注意src路径 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/clipboard-min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/clipboard-use.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>当然将 <code>clipboard-min.js</code> 和 <code>clipboard-use.js</code> 保存到CDN上，通过远程引用也可以.</p></blockquote></li></ul><ul><li>最后重新部署即可。</li></ul><h2 id="代码块高亮"><a href="#代码块高亮" class="headerlink" title="代码块高亮"></a>代码块高亮</h2><p>在<code>nexmoe</code>主题中，使用hexo原生的<code>hightlight</code>并没有起作用，根据<a href="https://hexo.io/zh-cn/docs/syntax-highlight#Highlight-js">官网教程</a>，这里给出两种方法进行代码块的高亮。</p><h3 id="使用prismjs进行代码高亮"><a href="#使用prismjs进行代码高亮" class="headerlink" title="使用prismjs进行代码高亮"></a>使用prismjs进行代码高亮</h3><p>Prism是一种轻量级的，可扩展的语法突出显示工具，在构建时考虑了现代Web标准。</p><ul><li><p>进入<a href="https://prismjs.com/download.html">prismjs官网</a>，依据情况选择主题、语言和最下方的插件。</p><p><img src="/2022/06/12/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/prismjs-1.png" alt>  </p><p><img src="/2022/06/12/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/prismjs-2.png" alt>  </p><p>其中语言我全部勾选了，插件如图所示选择了两个。选择完成后点击下方的下载按钮，分别下载css和js文件。下载后的文件可以保存在<code>themes/你的主题/source/js</code>文件夹下。</p></li><li><p>下载完成后，引入css文件和js文件即可。打开<code>themes/你的主题/layout/layout.ejs</code>文件（部分主题可能是swig格式），在<code>head</code>标签内添加<code>css</code>文件链接：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/css/prism.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中<code>href</code>后面填写的就是你下载的css文件的路径。假如你放在了<code>themes/你的主题/source/js</code>文件夹下，那么引入方式为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/js/prism.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>即下图：</p><p><img src="/2022/06/12/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/head_table.png" alt>  </p></li></ul><ul><li><p>js文件的引入类似，也是在这个文件中，但是此时是在<code>body</code>标签内引入。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/prism.js&quot;</span> <span class="hljs-attr">async</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>即下图：</p><p><img src="/2022/06/12/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/body_label.png" alt>  </p></li></ul><p>  同理，<code>src</code>是你的路径。</p><ul><li><p>在完成上述步骤后，在博客的配置文件<code>_config.yml</code>中配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">prismjs:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_threshold:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>最后重新编译即可。</p></li></ul><h3 id="使用hightlight-js进行代码高亮"><a href="#使用hightlight-js进行代码高亮" class="headerlink" title="使用hightlight.js进行代码高亮"></a>使用hightlight.js进行代码高亮</h3><p>使用hightlight.js配置的方式与prismjs类似。</p><ul><li><p>首先前往<a href="https://highlightjs.org/download/">hightlight.js下载页面</a>，勾选常用语言后，下拉点击<code>Download</code>按钮</p><p><img src="/2022/06/12/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/hightlight.png" alt>  </p></li></ul><ul><li><p>将下载后的文件解压在<code>themes/你的主题/source/js</code>文件夹下。</p><p><img src="/2022/06/12/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/folder.png" alt>  </p></li></ul><ul><li><p>打开<code>themes/你的主题/layout/layout.ejs</code>文件，在<code>body</code>标签内引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/highlight/highlight.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>即下图：</p><p><img src="/2022/06/12/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/body_label.png" alt>  </p><p>注意<code>src</code>是你存放的路径。</p></li><li><p>然后，打开<code>hightlight/styles/</code>文件夹，里面有很多<code>css</code>主题样式，选择一个你想要的主题，例如，我选择的是<code>atom-one-dark.min.css</code>样式，那么就在<code>layout.ejs</code>文件下的<code>head</code>标签内引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/js/highlight/styles/atom-one-dark.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>即下图：</p><p><img src="/2022/06/12/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/head_table.png" alt>  </p></li><li><p>最后，在博客配置文件<code>_config.yml</code>中配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">wrap:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hljs:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>编译部署后即可生效。</p></li></ul><h2 id="Sakana石蒜模拟器"><a href="#Sakana石蒜模拟器" class="headerlink" title="Sakana石蒜模拟器"></a>Sakana石蒜模拟器</h2><p>偶然在网上发现了这个非常可爱有趣的<a href="https://github.com/itorr/sakana">小动态玩偶</a>，现在把它集成到网站上去，简易集成可参考<a href="https://kwydy.cn/2022/09/01/%E7%9F%B3%E8%92%9C%E6%A8%A1%E6%8B%9F%E5%99%A8-%E4%B8%BA%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%88%96%E7%BD%91%E7%AB%99%E5%8A%A0%E4%B8%8A%F0%9F%90%9F%E5%90%A7/">博客</a>。</p><p><img src="/2022/06/12/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/sakana.png" alt>  </p><ul><li><p>打开<code>themes/你的主题/layout/layout.ejs</code>文件，在<code>body</code>标签内引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--sakana模拟器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">html</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-number">#CCC</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">html</span> <span class="hljs-selector-class">.sakana-box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: fixed;</span><br><span class="language-css">        <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">100%</span> <span class="hljs-number">100%</span>;</span><br><span class="language-css">        <span class="hljs-comment">/* 从右下开始变换 */</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sakana-box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/sakana@1.0.8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/sakana.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p>在<code>themes/你的主题/source/js</code>文件夹下新建<code>sakana.js</code>文件，填写内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><br><span class="hljs-comment">//设置sakana状态</span><br><span class="hljs-comment">// 设定静音</span><br><span class="hljs-title class_">Sakana</span>.<span class="hljs-title function_">setMute</span>(<span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">// 获取静音状态</span><br><span class="hljs-keyword">const</span> &#123; isMute &#125; = <span class="hljs-title class_">Sakana</span>.<span class="hljs-property">Voices</span>;<br><br><span class="hljs-comment">// 启动</span><br><span class="hljs-keyword">const</span> sakana = <span class="hljs-title class_">Sakana</span>.<span class="hljs-title function_">init</span>(&#123;<br>  <span class="hljs-comment">// 选项: 默认值</span><br>  <span class="hljs-attr">el</span>:         <span class="hljs-string">&#x27;.sakana-box&#x27;</span>,     <span class="hljs-comment">// 启动元素 node 或 选择器</span><br>  <span class="hljs-attr">character</span>:  <span class="hljs-string">&#x27;chisato&#x27;</span>,          <span class="hljs-comment">// 启动角色 &#x27;chisato&#x27;,&#x27;takina&#x27; </span><br>  <span class="hljs-attr">inertia</span>:    <span class="hljs-number">0.1</span>,              <span class="hljs-comment">// 惯性</span><br>  <span class="hljs-attr">decay</span>:      <span class="hljs-number">0.99</span>,              <span class="hljs-comment">// 衰减</span><br>  <span class="hljs-attr">r</span>:          <span class="hljs-number">60</span>,                <span class="hljs-comment">// 启动角度</span><br>  <span class="hljs-attr">y</span>:          <span class="hljs-number">10</span>,                <span class="hljs-comment">// 启动高度</span><br>  <span class="hljs-attr">scale</span>:      <span class="hljs-number">0.5</span>,                 <span class="hljs-comment">// 缩放倍数</span><br>  <span class="hljs-attr">translateY</span>: <span class="hljs-number">0</span>,                 <span class="hljs-comment">// 位移高度</span><br>  <span class="hljs-attr">canSwitchCharacter</span>: <span class="hljs-literal">false</span>,     <span class="hljs-comment">// 允许换角色</span><br>  <span class="hljs-title function_">onSwitchCharacter</span>(<span class="hljs-params">character</span>)&#123;  <span class="hljs-comment">// 切换角色回调</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;character&#125;</span> dayo~`</span>);<br>  &#125;,<br>&#125;);<br><br><span class="hljs-comment">// 设定归零角度</span><br>sakana.<span class="hljs-title function_">setOriginRotate</span>(<span class="hljs-number">10</span>);<br><br><span class="hljs-comment">// 获取角色运行状态</span><br><span class="hljs-keyword">const</span> v = sakana.<span class="hljs-title function_">getValue</span>();<br><br><span class="hljs-comment">// 确保运行</span><br>sakana.<span class="hljs-title function_">confirmRunning</span>();<br><br><span class="hljs-comment">// 切换角色</span><br>sakana.<span class="hljs-title function_">switchCharacter</span>();<br><br><span class="hljs-comment">// 暂停动作</span><br>sakana.<span class="hljs-title function_">pause</span>();<br><br><span class="hljs-comment">// 恢复动作</span><br>sakana.<span class="hljs-title function_">play</span>();<br><br><span class="hljs-comment">// 切换特定角色</span><br>sakana.<span class="hljs-title function_">setCharacter</span>(<span class="hljs-string">&#x27;chisato&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>博客重新部署生成即可。</p></li></ul><h2 id="使用不蒜子添加访问量和阅读量功能"><a href="#使用不蒜子添加访问量和阅读量功能" class="headerlink" title="使用不蒜子添加访问量和阅读量功能"></a>使用不蒜子添加访问量和阅读量功能</h2><h3 id="添加访问量等信息"><a href="#添加访问量等信息" class="headerlink" title="添加访问量等信息"></a>添加访问量等信息</h3><p>以nexmoe主题为例，打开<code>themes/nexmoe/layout/_partial/header.ejs</code>文件，在<code>&lt;div class=&quot;nexmoe-copyright&quot;&gt;</code>标签内添加以下代码即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 添加访问数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 13px&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://widget.heweather.net/standard/static/css/he-standard.css?v=1.4.0&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://widget.heweather.net/standard/static/js/he-standard.js?v=1.4.0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>            本站总访问量 <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> 次<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            本站访客数<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>人次<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>重新部署即可生效。</p><h3 id="添加文章阅读量信息"><a href="#添加文章阅读量信息" class="headerlink" title="添加文章阅读量信息"></a>添加文章阅读量信息</h3><p>以nexmoe主题为例，打开<code>themes/nexmoe/layout/_partial/_post/word-count.ejs</code>文件，添加以下代码即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nexmoefont icon-areachart&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;archive-article-date&quot;</span>&gt;</span>阅读量<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_page_pv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加位置如下：</p><p><img src="/2022/06/12/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/20221101215424.png" alt>  </p><p>重新部署即可生效。</p><blockquote><p>后来测试发现好像并不是每篇文章的阅读量，是总的阅读量，暂且先这样。</p></blockquote><h2 id="添加文章分享链接"><a href="#添加文章分享链接" class="headerlink" title="添加文章分享链接"></a>添加文章分享链接</h2><p>在<code>themes/nexmoe/layout/_partial/copyright.ejs</code>中，添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 文章分享 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/social-share.js/1.0.16/css/share.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/social-share.js/1.0.16/js/social-share.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;social-share&quot;</span> <span class="hljs-attr">data-mode</span>=<span class="hljs-string">&quot;prepend&quot;</span> <span class="hljs-attr">data-disabled</span>=<span class="hljs-string">&quot;tencent,diandian&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加位置如下：</p><p><img src="/2022/06/12/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/20221101220321.png" alt>  </p><p>重新部署即可生效。</p>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
          <category> 页面美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu20.04配置Qv2ray</title>
      <link href="/2022/04/15/ubuntu20-04%E9%85%8D%E7%BD%AEQv2ray/"/>
      <url>/2022/04/15/ubuntu20-04%E9%85%8D%E7%BD%AEQv2ray/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://bella722.github.io/post/a231f91f.html">Ubuntu20.04下成功配置Qv2ray </a></p><h2 id="1-安装客户端"><a href="#1-安装客户端" class="headerlink" title="1. 安装客户端"></a>1. 安装客户端</h2><p>软件中心搜索<code>qv2ray</code>安装即可</p><h2 id="2-配置客户端"><a href="#2-配置客户端" class="headerlink" title="2. 配置客户端"></a>2. 配置客户端</h2><h3 id="2-1-软件配置"><a href="#2-1-软件配置" class="headerlink" title="2.1 软件配置"></a>2.1 软件配置</h3><p>打开Qv2ray, 会在主文件夹下的snap下自动生成一个名为<code>qv2ray</code>的文件夹</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/bbe8e7bc15dd4c7aa12bee2f5457d02d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>进入<a href="https://github.com/v2fly/v2ray-core/releases/tag/v4.31.0">https://github.com/v2ray/v2ray-core/releases</a> ，根据自己的系统下载相应的核心文件，我这边下载的是v2ray-linux-64.zip</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/6b8a81295d094a3e8a8634d7622f0bfe.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>而后在目录<code>/home/your_user_name/snap/qv2ray/4576/.config/qv2ray</code>文件夹下新建<code>vcore</code>文件夹，并将之前下载的核心文件解压缩后全部拷贝到<code>vcore</code>文件夹内。注意这里的4576版本号是不固定的，根据自己的来就好。另外就是需要按住<code>ctrl+h</code>才能显示隐藏的.config文件夹。</p><p>以上完成后验证核心文件。点击Qv2ray界面中的<code>首选项</code>：</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/12a1028766814baaaee3d4a93e8db503.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>然后点击<code>内核设置</code>—&gt;<code>检查V2Ray核心设置</code>：</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/26cc2fde75ca4ed38a786da764fd82ea.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>如果一切正常，则会出现检查通过提示：</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/ff22ca92a08448ae957c7a3376478a42.png" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>然后便可以点击OK，关闭。<br>除此之外，还需配置网络代理，首先查看<code>入站设置</code>中的默认网络代理：</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/ab0725760a66464f8280a4e51cedc5c7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>例如我这里默认的是socks端口为<code>7891</code>,http端口为<code>7890</code>.这个端口号是可以修改的，这里用默认的就行。随后，ubuntu桌面右上角打开ubuntu的系统设置，选择<code>网络</code>—&gt;<code>网络代理</code></p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/b904c9467004414590fbc8d2f6485bfe.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>将网络代理切换为<code>手动</code>，如图所示，将HTTP和HTTPS代理端口填写为上面获取到的HTTP端口，Socks主机端口号也填写成上面获取到的端口号即可。</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/0beb3062e67e42799f3d0110fce96745.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>这一部分配置完成。</p><blockquote><p>注：默认端口号是可以更改的，只需要让<strong>软件</strong>中的端口号和<strong>ubuntu</strong>系统设置中的网络代理端口号保持一致，即可。</p></blockquote><h3 id="2-2-node配置"><a href="#2-2-node配置" class="headerlink" title="2.2 node配置"></a>2.2 node配置</h3><p>回到软件首页配置入网config文件。选择<code>新建</code>,出现如下信息：</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/b6f1a0c64c3d4334aad73f5addc2651a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>我们需要将获取到的node复制粘贴到所述的<code>分享链接</code>框内即可。<br>至于节点的获取，在这里分享一个github上的<code>free</code>获取地址：<a href="https://github.com/iwxf/free-v2ray">free node</a><br>导入node后，就会出现类似如图所示的界面：</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/b78a1191f6ae4fa1806684be661c948c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>双击任何一个node，即可连接成功。<br>如果不需要连接时，点击断开连接以及将ubuntu系统中的网络代理从<code>手动</code>切换为<code>禁用</code>。<br>最后祝小伙伴们使用愉快。</p>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
          <category> VPN教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下配置Qv2ray</title>
      <link href="/2022/04/15/windows%E4%B8%8B%E9%85%8D%E7%BD%AEQv2ray/"/>
      <url>/2022/04/15/windows%E4%B8%8B%E9%85%8D%E7%BD%AEQv2ray/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://bella722.github.io/post/a6ffce94.html">Windows下成功配置Qv2ray </a></p><h2 id="1-软件下载"><a href="#1-软件下载" class="headerlink" title="1. 软件下载"></a>1. 软件下载</h2><p>点击<a href="https://github.com/Qv2ray/Qv2ray/releases">https://github.com/Qv2ray/Qv2ray/releases</a>，根据自己系统选择对应的下载，我这边选的是</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/184030d4a7d84df0b758302180986f47.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><h2 id="2-配置核心文件"><a href="#2-配置核心文件" class="headerlink" title="2. 配置核心文件"></a>2. 配置核心文件</h2><p>点击<a href="https://github.com/v2fly/v2ray-core/releases">https://github.com/v2fly/v2ray-core/releases</a>，<br>根据你自己的环境选择对应的压缩包下载，成功后先从桌面打开qv2ray, 进入界面后在设置里根据提示的核心文件路径进行配置。</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/e3a364ecd3d94f188b74f56fccc1e15b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/a1548a747ac9401c9d6db52a4d832b56.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>根据路径提示需要有一个名为vcore的文件夹，因此这里必须在相应路径下新建该文件夹。vcore文件夹新建好之后需要将刚才下载的压缩包里的核心文件拷贝过来。<br><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/50d0c1de012145a29fb10d4d6fff2bb2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>接着通过核心验证。</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/4fe99280cead45a98119e31f758eadf0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><h2 id="3-node配置"><a href="#3-node配置" class="headerlink" title="3. node配置"></a>3. node配置</h2><p>回到软件首页，选择<code>导入</code>,出现如下信息：</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/9375283d8c7f493fa9d89731edf57d89.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>我们需要将获取到的node复制粘贴到所述的<code>分享链接</code>框内即可。<br>至于节点的获取，在这里分享一个github上的<code>free</code>获取地址：<a href="https://github.com/iwxf/free-v2ray">free node</a><br>导入node后，就会出现类似如图所示的界面：</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/8b2904c2640d43a6ab2ef7492ec36edd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>双击默认分组，可以看到所有节点</p><p><img data-fancybox="gallery" src="https://img-blog.csdnimg.cn/ac5c0eac89b94e43894ca6204cecfa4f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ0hIMzIxMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" data-caption="在这里插入图片描述" loading="lazy"></p><p>双击任何一个node，即可连接成功。<br>如果不需要连接时，点击断开连接即可。<br>最后祝小伙伴们使用愉快。</p>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
          <category> VPN教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
